diff -r ed1f93938bf5 media/liboggplay/src/liboggplay/oggplay_yuv2rgb.c
--- a/media/liboggplay/src/liboggplay/oggplay_yuv2rgb.c	Thu May 21 20:27:30 2009 -0700
+++ b/media/liboggplay/src/liboggplay/oggplay_yuv2rgb.c	Fri May 22 14:46:17 2009 +0800
@@ -44,8 +44,15 @@
 #include "oggplay_private.h"
 #include "oggplay_yuv2rgb_template.h"
 
+#ifdef __SUNPRO_C
+#define DISABLE_CPU_FEATURES
+/* gcc inline asm and intristics have problems with Sun Studio.
+ * We need to fix it.
+ */
+#else
 /* cpu extension detection */
 #include "cpu.c"
+#endif
 
 /**
  * yuv_convert_fptr type is a function pointer type for
@@ -138,18 +145,25 @@
 #undef CONVERT
 #undef CLEANUP
 
+#ifndef DISABLE_CPU_FEATURES
 /* although we use cpu runtime detection, we still need these
  * macros as there's no way e.g. we could compile a x86 asm code 
  * on a ppc machine and vica-versa
  */
 #if defined(i386) || defined(__x86__) || defined(__x86_64__) || defined(_M_IX86)
+#define ENABLE_MMX
 #include "x86/oggplay_yuv2rgb_x86.c"
+#if defined(ATTRIBUTE_ALIGNED_MAX) && ATTRIBUTE_ALIGNED_MAX >= 16 
+#define ENABLE_SSE2
+#endif
 #elif defined(__ppc__) || defined(__ppc64__)
+#define ENABLE_ALTIVEC
 //altivec intristics only working with -maltivec gcc flag, 
 //but we want runtime altivec detection, hence this has to be
 //fixed!
 //#include "oggplay_yuv2rgb_altivec.c"
 #endif
+#endif
 
 
 /**
@@ -184,9 +198,11 @@
 	if ( yuv_conv.yuv2rgba == NULL )
 	{
 		init_vanilla_coeffs ();
-		features = oc_cpu_flags_get(); 		
-#if defined(i386) || defined(__x86__) || defined(__x86_64__) || defined(_M_IX86)
-#if defined(ATTRIBUTE_ALIGNED_MAX) && ATTRIBUTE_ALIGNED_MAX >= 16 
+#ifndef DISABLE_CPU_FEATURES
+		features = oc_cpu_flags_get();
+#endif
+#ifdef ENABLE_MMX
+#ifdef ENABLE_SSE2
 		if (features & OC_CPU_X86_SSE2) 
 		{
 			yuv_conv.yuv2rgba = yuv420_to_rgba_sse2;
@@ -195,7 +211,7 @@
 			return;
 		}
 		else
-#endif /* ATTRIBUTE_ALIGNED_MAX */
+#endif /* SSE2 */
 		if (features & OC_CPU_X86_MMXEXT)	
 		{
 			yuv_conv.yuv2rgba = yuv420_to_rgba_sse;
@@ -210,7 +226,7 @@
 			yuv_conv.yuv2argb = yuv420_to_argb_mmx;
 			return;
 		}
-#elif defined(__ppc__) || defined(__ppc64__)
+#elif defined(ENABLE_ALTIVEC)
 		if (features & OC_CPU_PPC_ALTIVEC)
 		{
 			yuv_conv.yuv2rgba = yuv420_to_abgr_vanilla;
@@ -219,7 +235,7 @@
 			return;
 		}
 #endif		
-		/*
+    /*
      * no CPU extension was found... using vanilla converter, with respect
      * to the endianness of the host
      */
