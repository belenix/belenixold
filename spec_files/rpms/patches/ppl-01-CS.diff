--- ppl-0.10.2/src/Pointset_Powerset.defs.hh.orig	2009-05-06 10:19:51.620341666 +0530
+++ ppl-0.10.2/src/Pointset_Powerset.defs.hh	2009-05-06 10:20:11.962303614 +0530
@@ -65,8 +65,8 @@
   typedef PS element_type;
 
 private:
-  typedef Determinate<PS> CS;
-  typedef Powerset<CS> Base;
+  typedef Determinate<PS> C_S;
+  typedef Powerset<C_S> Base;
 
 public:
   //! Returns the maximum space dimension a Pointset_Powerset<PS> can handle.
--- ppl-0.10.2/src/Widening_Function.defs.hh.orig	2009-05-06 10:21:25.510825377 +0530
+++ ppl-0.10.2/src/Widening_Function.defs.hh	2009-05-06 10:21:40.027994859 +0530
@@ -57,12 +57,12 @@
 //! Wraps a limited widening method into a function object.
 /*! \ingroup PPL_CXX_interface */
 #endif // defined(PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS)
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 class Parma_Polyhedra_Library::Limited_Widening_Function {
 public:
   //! The (parametric) type of a limited widening method.
   typedef void (PH::* Limited_Widening_Method)(const PH&,
-					       const CS&,
+					       const C_S&,
 					       unsigned*);
 
   //! Constructor.
@@ -74,7 +74,7 @@
     The constraint system limiting the widening.
   */
   Limited_Widening_Function(Limited_Widening_Method lwm,
-			    const CS& cs);
+			    const C_S& cs);
 
   //! Function-application operator.
   /*!
@@ -88,7 +88,7 @@
   //! The limited widening method.
   Limited_Widening_Method lw_method;
   //! A constant reference to the constraint system limiting the widening.
-  const CS& limiting_cs;
+  const C_S& limiting_cs;
 };
 
 namespace Parma_Polyhedra_Library {
@@ -114,10 +114,10 @@
   \param cs
   The constraint system limiting the widening.
 */
-template <typename PH, typename CS>
-Limited_Widening_Function<PH, CS>
-widen_fun_ref(void (PH::* lwm)(const PH&, const CS&, unsigned*),
-	      const CS& cs);
+template <typename PH, typename C_S>
+Limited_Widening_Function<PH, C_S>
+widen_fun_ref(void (PH::* lwm)(const PH&, const C_S&, unsigned*),
+	      const C_S& cs);
 
 } // namespace Parma_Polyhedra_Library
 
--- ppl-0.10.2/src/Widening_Function.types.hh.orig	2009-05-06 10:22:24.592499948 +0530
+++ ppl-0.10.2/src/Widening_Function.types.hh	2009-05-06 10:22:40.373591898 +0530
@@ -17,7 +17,7 @@
 template <typename PH>
 class Widening_Function;
 
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 class Limited_Widening_Function;
 
 } // namespace Parma_Polyhedra_Library
--- ppl-0.10.2/src/Pointset_Powerset.templates.hh.orig	2009-05-06 10:20:47.341911942 +0530
+++ ppl-0.10.2/src/Pointset_Powerset.templates.hh	2009-05-06 10:21:09.355720036 +0530
@@ -108,7 +108,7 @@
   for (const_iterator xi = x.begin(), x_end = x.end(),
 	 y_begin = y.begin(), y_end = y.end(); xi != x_end; ) {
     for (const_iterator yi = y_begin; yi != y_end; ++yi) {
-      CS zi = *xi;
+      C_S zi = *xi;
       zi.concatenate_assign(*yi);
       assert(!zi.is_bottom());
       new_x.sequence.push_back(zi);
--- ppl-0.10.2/src/Widening_Function.inlines.hh.orig	2009-05-06 10:21:55.935611168 +0530
+++ ppl-0.10.2/src/Widening_Function.inlines.hh	2009-05-06 10:22:10.276735693 +0530
@@ -39,16 +39,16 @@
   (x.*w_method)(y, tp);
 }
 
-template <typename PH, typename CS>
-Limited_Widening_Function<PH, CS>::
+template <typename PH, typename C_S>
+Limited_Widening_Function<PH, C_S>::
 Limited_Widening_Function(Limited_Widening_Method lwm,
-			  const CS& cs)
+			  const C_S& cs)
   : lw_method(lwm), limiting_cs(cs) {
 }
 
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 inline void
-Limited_Widening_Function<PH, CS>::
+Limited_Widening_Function<PH, C_S>::
 operator()(PH& x, const PH& y, unsigned* tp) const {
   (x.*lw_method)(y, limiting_cs, tp);
 }
@@ -61,11 +61,11 @@
 }
 
 /*! \relates Pointset_Powerset */
-template <typename PH, typename CS>
-inline Limited_Widening_Function<PH, CS>
-widen_fun_ref(void (PH::* lwm)(const PH&, const CS&, unsigned*),
-	      const CS& cs) {
-  return Limited_Widening_Function<PH, CS>(lwm, cs);
+template <typename PH, typename C_S>
+inline Limited_Widening_Function<PH, C_S>
+widen_fun_ref(void (PH::* lwm)(const PH&, const C_S&, unsigned*),
+	      const C_S& cs) {
+  return Limited_Widening_Function<PH, C_S>(lwm, cs);
 }
 
 } // namespace Parma_Polyhedra_Library
--- ppl-0.10.2/src/ppl.hh.dist.orig	2009-05-06 10:25:31.735112674 +0530
+++ ppl-0.10.2/src/ppl.hh.dist	2009-05-06 10:26:21.019057905 +0530
@@ -29164,7 +29164,7 @@
 template <typename PH>
 class Widening_Function;
 
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 class Limited_Widening_Function;
 
 } // namespace Parma_Polyhedra_Library
@@ -29202,12 +29202,12 @@
 //! Wraps a limited widening method into a function object.
 /*! \ingroup PPL_CXX_interface */
 #endif // defined(PPL_DOXYGEN_INCLUDE_IMPLEMENTATION_DETAILS)
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 class Parma_Polyhedra_Library::Limited_Widening_Function {
 public:
   //! The (parametric) type of a limited widening method.
   typedef void (PH::* Limited_Widening_Method)(const PH&,
-					       const CS&,
+					       const C_S&,
 					       unsigned*);
 
   //! Constructor.
@@ -29219,7 +29219,7 @@
     The constraint system limiting the widening.
   */
   Limited_Widening_Function(Limited_Widening_Method lwm,
-			    const CS& cs);
+			    const C_S& cs);
 
   //! Function-application operator.
   /*!
@@ -29233,7 +29233,7 @@
   //! The limited widening method.
   Limited_Widening_Method lw_method;
   //! A constant reference to the constraint system limiting the widening.
-  const CS& limiting_cs;
+  const C_S& limiting_cs;
 };
 
 namespace Parma_Polyhedra_Library {
@@ -29259,10 +29259,10 @@
   \param cs
   The constraint system limiting the widening.
 */
-template <typename PH, typename CS>
-Limited_Widening_Function<PH, CS>
-widen_fun_ref(void (PH::* lwm)(const PH&, const CS&, unsigned*),
-	      const CS& cs);
+template <typename PH, typename C_S>
+Limited_Widening_Function<PH, C_S>
+widen_fun_ref(void (PH::* lwm)(const PH&, const C_S&, unsigned*),
+	      const C_S& cs);
 
 } // namespace Parma_Polyhedra_Library
 
@@ -29287,16 +29287,16 @@
   (x.*w_method)(y, tp);
 }
 
-template <typename PH, typename CS>
-Limited_Widening_Function<PH, CS>::
+template <typename PH, typename C_S>
+Limited_Widening_Function<PH, C_S>::
 Limited_Widening_Function(Limited_Widening_Method lwm,
-			  const CS& cs)
+			  const C_S& cs)
   : lw_method(lwm), limiting_cs(cs) {
 }
 
-template <typename PH, typename CS>
+template <typename PH, typename C_S>
 inline void
-Limited_Widening_Function<PH, CS>::
+Limited_Widening_Function<PH, C_S>::
 operator()(PH& x, const PH& y, unsigned* tp) const {
   (x.*lw_method)(y, limiting_cs, tp);
 }
@@ -29309,11 +29309,11 @@
 }
 
 /*! \relates Pointset_Powerset */
-template <typename PH, typename CS>
-inline Limited_Widening_Function<PH, CS>
-widen_fun_ref(void (PH::* lwm)(const PH&, const CS&, unsigned*),
-	      const CS& cs) {
-  return Limited_Widening_Function<PH, CS>(lwm, cs);
+template <typename PH, typename C_S>
+inline Limited_Widening_Function<PH, C_S>
+widen_fun_ref(void (PH::* lwm)(const PH&, const C_S&, unsigned*),
+	      const C_S& cs) {
+  return Limited_Widening_Function<PH, C_S>(lwm, cs);
 }
 
 } // namespace Parma_Polyhedra_Library
@@ -72998,8 +72998,8 @@
   typedef PS element_type;
 
 private:
-  typedef Determinate<PS> CS;
-  typedef Powerset<CS> Base;
+  typedef Determinate<PS> C_S;
+  typedef Powerset<C_S> Base;
 
 public:
   //! Returns the maximum space dimension a Pointset_Powerset<PS> can handle.
@@ -74560,7 +74560,7 @@
 Pointset_Powerset<PS>::intersection_assign(const Pointset_Powerset& y) {
   Pointset_Powerset& x = *this;
   x.pairwise_apply_assign
-    (y, CS::lift_op_assign(std::mem_fun_ref(&PS::intersection_assign)));
+    (y, C_S::lift_op_assign(std::mem_fun_ref(&PS::intersection_assign)));
 }
 
 template <typename PS>
@@ -74576,7 +74576,7 @@
 Pointset_Powerset<PS>::time_elapse_assign(const Pointset_Powerset& y) {
   Pointset_Powerset& x = *this;
   x.pairwise_apply_assign
-    (y, CS::lift_op_assign(std::mem_fun_ref(&PS::time_elapse_assign)));
+    (y, C_S::lift_op_assign(std::mem_fun_ref(&PS::time_elapse_assign)));
 }
 
 template <typename PS>
@@ -74763,7 +74763,7 @@
   for (const_iterator xi = x.begin(), x_end = x.end(),
 	 y_begin = y.begin(), y_end = y.end(); xi != x_end; ) {
     for (const_iterator yi = y_begin; yi != y_end; ++yi) {
-      CS zi = *xi;
+      C_S zi = *xi;
       zi.concatenate_assign(*yi);
       assert(!zi.is_bottom());
       new_x.sequence.push_back(zi);
--- ppl-0.10.2/src/Pointset_Powerset.inlines.hh.orig	2009-05-06 10:34:36.307354632 +0530
+++ ppl-0.10.2/src/Pointset_Powerset.inlines.hh	2009-05-06 10:34:46.328468192 +0530
@@ -209,7 +209,7 @@
 Pointset_Powerset<PS>::intersection_assign(const Pointset_Powerset& y) {
   Pointset_Powerset& x = *this;
   x.pairwise_apply_assign
-    (y, CS::lift_op_assign(std::mem_fun_ref(&PS::intersection_assign)));
+    (y, C_S::lift_op_assign(std::mem_fun_ref(&PS::intersection_assign)));
 }
 
 template <typename PS>
@@ -225,7 +225,7 @@
 Pointset_Powerset<PS>::time_elapse_assign(const Pointset_Powerset& y) {
   Pointset_Powerset& x = *this;
   x.pairwise_apply_assign
-    (y, CS::lift_op_assign(std::mem_fun_ref(&PS::time_elapse_assign)));
+    (y, C_S::lift_op_assign(std::mem_fun_ref(&PS::time_elapse_assign)));
 }
 
 template <typename PS>
