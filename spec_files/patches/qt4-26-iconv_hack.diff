--- qt-x11-opensource-src-4.5.2/src/corelib/codecs/qiconvcodec.cpp.orig	2009-09-05 08:20:02.644113664 +0530
+++ qt-x11-opensource-src-4.5.2/src/corelib/codecs/qiconvcodec.cpp	2009-09-05 08:09:09.645540287 +0530
@@ -174,6 +174,7 @@
     int remainingCount = 0;
     char *remainingBuffer = 0;
     IconvState **pstate;
+    IconvState *state;
 
     if (convState) {
         // stateful conversion
@@ -188,16 +189,16 @@
             QTextCodecUnalignedPointer::encode(convState->state_data, qIconvCodecStateFree);
         }
     } else {
-        QThreadStorage<QIconvCodec::IconvState *> *ts = toUnicodeState();
-        if (!qt_locale_initialized || !ts) {
+        if (!qt_locale_initialized) {
             // we're running after the Q_GLOBAL_STATIC has been deleted
             // or before the QCoreApplication initialization
             // bad programmer, no cookie for you
             return QString::fromLatin1(chars, len);
         }
 
-        // stateless conversion -- use thread-local data
-        pstate = &toUnicodeState()->localData();
+        // stateless conversion 
+        state = new IconvState(QIconvCodec::createIconv_t(UTF16, 0));
+        pstate = &state;
     }
 
     if (!*pstate) {
@@ -215,7 +216,7 @@
         *pstate = new IconvState(cd);
     }
 
-    IconvState *state = *pstate;
+    state = *pstate;
     size_t inBytesLeft = len;
     // best case assumption, each byte is converted into one UTF-16 character, plus 2 bytes for the BOM
 #ifdef GNU_LIBICONV
@@ -242,7 +243,7 @@
     size_t outBytesLeft = len * 2 + 2;
     ba.resize(outBytesLeft);
     char *outBytes = ba.data();
-    do {
+    while (inBytesLeft != 0) {
         size_t ret = iconv(state->cd, &inBytes, &inBytesLeft, &outBytes, &outBytesLeft);
         if (ret == (size_t) -1) {
             if (errno == E2BIG) {
@@ -283,7 +284,7 @@
 
             return QString::fromAscii(chars, len);
         }
-    } while (inBytesLeft != 0);
+    }
 
     QString s = utf16Codec->toUnicode(ba.constData(), ba.size() - outBytesLeft);
 
@@ -291,8 +292,7 @@
         convState->invalidChars = invalidCount;
         convState->remainingChars = remainingCount;
     } else {
-        // reset state
-        iconv(state->cd, 0, &inBytesLeft, 0, &outBytesLeft);
+        delete state;
     }
 
     return s;
@@ -305,6 +305,7 @@
     char *inBytes;
     char *outBytes;
     size_t inBytesLeft;
+    iconv_t cd;
 
 #if defined(GNU_LIBICONV)
     const char **inBytesPtr = const_cast<const char **>(&inBytes);
@@ -312,8 +313,7 @@
     char **inBytesPtr = &inBytes;
 #endif
 
-    QThreadStorage<QIconvCodec::IconvState *> *ts = fromUnicodeState();
-    if (!qt_locale_initialized || !ts) {
+    if (!qt_locale_initialized) {
         // we're running after the Q_GLOBAL_STATIC has been deleted
         // or before the QCoreApplication initialization
         // bad programmer, no cookie for you
@@ -323,32 +323,30 @@
             return QByteArray("");
         return QString::fromRawData(uc, len).toLatin1();
     }
-    IconvState *&state = ts->localData();
-    if (!state) {
-        state = new IconvState(QIconvCodec::createIconv_t(0, UTF16));
-        if (state->cd != reinterpret_cast<iconv_t>(-1)) {
-            size_t outBytesLeft = len + 3; // +3 for the BOM
-            QByteArray ba;
-            ba.resize(outBytesLeft);
-            outBytes = ba.data();
+
+    cd = QIconvCodec::createIconv_t(0, UTF16);
+    if (cd != reinterpret_cast<iconv_t>(-1)) {
+        size_t outBytesLeft = len + 3; // +3 for the BOM
+        QByteArray ba;
+        ba.resize(outBytesLeft);
+        outBytes = ba.data();
 
 #if !defined(NO_BOM)
-            // give iconv() a BOM
-            QChar bom[] = { QChar(QChar::ByteOrderMark) };
-            inBytes = reinterpret_cast<char *>(bom);
-            inBytesLeft = sizeof(bom);
-            if (iconv(state->cd, inBytesPtr, &inBytesLeft, &outBytes, &outBytesLeft) == (size_t) -1) {
-                perror("QIconvCodec::convertFromUnicode: using ASCII for conversion, iconv failed for BOM");
+        // give iconv() a BOM
+        QChar bom[] = { QChar(QChar::ByteOrderMark) };
+        inBytes = reinterpret_cast<char *>(bom);
+        inBytesLeft = sizeof(bom);
+        if (iconv(cd, inBytesPtr, &inBytesLeft, &outBytes, &outBytesLeft) == (size_t) -1) {
+            perror("QIconvCodec::convertFromUnicode: using ASCII for conversion, iconv failed for BOM");
 
-                iconv_close(state->cd);
-                state->cd = reinterpret_cast<iconv_t>(-1);
+            iconv_close(cd);
+            cd = reinterpret_cast<iconv_t>(-1);
 
-                return QString(uc, len).toAscii();
-            }
-#endif // NO_BOM
+            return QString(uc, len).toAscii();
         }
+#endif // NO_BOM
     }
-    if (state->cd == reinterpret_cast<iconv_t>(-1)) {
+    if (cd == reinterpret_cast<iconv_t>(-1)) {
         static int reported = 0;
         if (!reported++) {
             fprintf(stderr,
@@ -381,8 +379,8 @@
     }
 
     int invalidCount = 0;
-    do {
-        if (iconv(state->cd, inBytesPtr, &inBytesLeft, &outBytes, &outBytesLeft) == (size_t) -1) {
+    while (inBytesLeft != 0) {
+        if (iconv(cd, inBytesPtr, &inBytesLeft, &outBytes, &outBytesLeft) == (size_t) -1) {
             if (errno == EINVAL && convState) {
                 // buffer ends in a surrogate
                 Q_ASSERT(inBytesLeft == 2);
@@ -415,17 +413,15 @@
                     perror("QIconvCodec::convertFromUnicode: using ASCII for conversion, iconv failed");
 
                     // reset to initial state
-                    iconv(state->cd, 0, &inBytesLeft, 0, &outBytesLeft);
+                    iconv(cd, 0, &inBytesLeft, 0, &outBytesLeft);
 
                     return QString(uc, len).toAscii();
                 }
             }
         }
-    } while (inBytesLeft != 0);
-
-    // reset to initial state
-    iconv(state->cd, 0, &inBytesLeft, 0, &outBytesLeft);
+    }
 
+    iconv_close(cd);
     ba.resize(ba.size() - outBytesLeft);
 
     if (convState)
