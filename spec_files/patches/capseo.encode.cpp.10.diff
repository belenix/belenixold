--- capseo-0.3.0-158.orig/src/encode.cpp	2007-03-04 14:58:57.000000000 -0500
+++ capseo-0.3.0-158/src/encode.cpp	2008-04-25 19:37:57.000000000 -0400
@@ -11,14 +11,18 @@
 //  the terms of GPL. See the file COPYING.
 //
 /////////////////////////////////////////////////////////////////////////////
-#include "capseo.h"
-#include "capseo_private.h"
 
-#include <stdio.h>
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include <cmath>
+#include <cassert>
+using namespace std;
+
 #include <sys/time.h>
-#include <string.h>
-#include <assert.h>
-#include <math.h>
+
+#include "capseo.h"
+#include "capseo_private.h"
 
 /*! \brief Encodes a stream header that represents given codec handle.
  * \param cs the codec handle.
@@ -38,15 +42,15 @@
  */
 int CapseoEncodeStreamHeader(capseo_t *cs, uint8_t **buffer, int *buflen) {
 	TCapseoStreamHeader header;
-	bzero(&header, sizeof(header));
+	(void) memset(&header, '\0', sizeof(header));
 
 	header.magic[0] = 'C';
 	header.magic[1] = 'P';
 	header.magic[2] = 'S';
 	header.magic[3] = 0X01; // revision
 
-	header.width = htonl(long(cs->info.width / pow(2, cs->info.scale)));
-	header.height = htonl(long(cs->info.height / pow(2, cs->info.scale)));
+	header.width = htonl(long(cs->info.width / pow(double(2), cs->info.scale)));
+	header.height = htonl(long(cs->info.height / pow(double(2), cs->info.scale)));
 	header.scale = htonl(cs->info.scale);
 	header.fps = htonl(cs->info.fps);
 	header.video_format = htonl(CAPSEO_FORMAT_ENCORE_QLZYUV420);
@@ -133,7 +137,7 @@
 
 	// prepare frame header encode
 	TCapseoFrameHeader frameHeader;
-	bzero(&frameHeader, sizeof(frameHeader));
+	(void) memset(&frameHeader, '\0', sizeof(frameHeader));
 	frameHeader.id = id;
 	outptr += sizeof(frameHeader);
 	*outlen += sizeof(frameHeader);
