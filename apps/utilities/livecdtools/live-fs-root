#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
#
# Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&T.
# All rights reserved.
#

# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

#
# Set flag to indicate whether we are in LiveCD environment
#
LIVECD=0
MOUNTED=0
[ -f /.livecd ] && LIVECD=1

libc_mount() {
	#
	# If there is an optimized libc available in /usr that fits this
	# processor, mount it on top of the base libc.
	#
	MOE=`/usr/bin/moe -32 '/usr/lib/libc/$HWCAP'`
	if [ -n "$MOE" ]; then
		/usr/sbin/mount | egrep -s "^/lib/libc.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $MOE /lib/libc.so.1
		fi
	fi
}

# This mount function is sun4v only. It may be melded with the sun4u-us3
# version later.
sun4v_libc_psr_mount() {
	LIBC_MOE_32=`/usr/bin/moe -32 /platform/$PLAT/lib/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_32" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/[^/]*/lib/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
			    /platform/$PLAT/lib/libc_psr.so.1
		fi
	fi

	LIBC_MOE_64=`/usr/bin/moe -64 \
	    /platform/$PLAT/lib/sparcv9/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_64" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/[^/]*/lib/sparcv9/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
			    /platform/$PLAT/lib/sparcv9/libc_psr.so.1
		fi
	fi
}

# This is specific to sun4u[-us3].
# try to intelligently handle the various ways that a hwcap library can
# be present for libc_psr for sun4u.
sun4u_libc_psr_mount() {
	# first look for $PLAT specific
	# the string $HWCAP is not an env var but part of the argument to moe
	LIBC_MOE_32=`/usr/bin/moe -32 /platform/$PLAT/lib/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_32" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/$PLAT/lib/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
			    /platform/$PLAT/lib/libc_psr.so.1
		fi
	else
		# try the 'generic' one under $ARCH
		LIBC_MOE_32=`/usr/bin/moe -32 \
		    /platform/$ARCH/lib/libc_psr/'$HWCAP'`
		if [ -n "$LIBC_MOE_32" ]; then
			/usr/sbin/mount |
			    egrep -s "^/platform/$ARCH/lib/libc_psr.so.1 on "
			if [ $? -ne 0 ]; then
				/usr/sbin/mount -O -F lofs $LIBC_MOE_32 \
				    /platform/$ARCH/lib/libc_psr.so.1
			fi
		fi

	fi

	# now repeat for 64 bit.

	LIBC_MOE_64=`/usr/bin/moe -64 \
	    /platform/$PLAT/lib/sparcv9/libc_psr/'$HWCAP'`
	if [ -n "$LIBC_MOE_64" ]; then
		/usr/sbin/mount |
		    egrep -s "^/platform/$PLAT/lib/sparcv9/libc_psr.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
			    /platform/$PLAT/lib/sparcv9/libc_psr.so.1
		fi
	else
		# now try $ARCH version
		LIBC_MOE_64=`/usr/bin/moe -64 \
		    /platform/$ARCH/lib/sparcv9/libc_psr/'$HWCAP'`
		if [ -n "$LIBC_MOE_64" ]; then
			/usr/sbin/mount |
			    egrep -s \
			    "^/platform/$ARCH/lib/sparcv9/libc_psr.so.1 on "
			if [ $? -ne 0 ]; then
				/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
				    /platform/$ARCH/lib/sparcv9/libc_psr.so.1
			fi
		fi
	fi
}

#
# Most of the operations in this script are only necessary in the global
# zone but due to the way initialization scripts like this are packaged,
# it needs to currently exist for all zones.
#
if [ "${_INIT_ZONENAME:=`/sbin/zonename`}" != "global" ]; then
	libc_mount
	exit 0
fi

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh

copy()
{
	source=$1 ; dest=$2 ;testcase="100"
	sourcesize=`/usr/bin/ls -l $source | /usr/bin/awk '{print $5}'`
	destsize=0
	/usr/bin/cp "$1" "$2" &
	while [ $sourcesize -ge $destsize ] ;do
		destsize=`/usr/bin/ls -l $dest | /usr/bin/awk '{print $5}'`
		pct1=`/usr/bin/expr $destsize \* 100`
		pct=`/usr/bin/expr $pct1 / $sourcesize`
		if [ $pct -eq $testcase ] ;then
			echo "$pct%" >/dev/msglog
			return
		else
			echo "\b\b\b\b$pct% \c" >/dev/msglog
		fi
		destsize=`/usr/bin/expr $destsize + 1 `
		[ $pct -lt 100 ] && sleep 5
	done
}

if [ $LIVECD = 1 ]
then

	#
	# Remount root RW
	#
	echo "\rRemounting root read/write" > /dev/msglog
	/sbin/mount -o remount,rw /devices/ramdisk:a /


	#
	# Workaround for devfs lazy init. The sd nodes are not
        # created till you try to access them.
	#
	echo "Probing for device nodes ..." > /dev/msglog

	ls -lR /devices/* > /dev/null

	volumeid=`cat /.volumeid`

	echo "\rPreparing live image for use" >/dev/msglog

	# Determine if any of the USB devices contains a UFS filesystem.
	# For devices that do, attempt to mount them to see if the 
	# compressed /usr filesystem exists

	/sbin/listusb | while read dev rdev
	do
		/usr/lib/fs/ufs/fstyp $rdev 2>&1 | grep "^ufs$"
		if [ $? -eq 0 ]
		then
			/sbin/mount -F ufs -o nologging,noatime $dev /.cdrom || break
			if [ -f /.cdrom/solaris.zlib ]
			then
				echo "" > /.liveusb
				break
			else
				/sbin/umount -f $dev
				continue
			fi
		fi
	done

	# ..Else look for CD
	[ ! -f /.liveusb ] && /sbin/listcd | while read dev rdev
	do
		/usr/lib/fs/hsfs/fstyp -v $rdev 2>&1 | grep "Volume id: $volumeid" > /dev/null
		if [ $? -eq 0 ]
		then
			/sbin/mount -F hsfs -o ro $dev /.cdrom || break
		fi
	done

	# Check if mount of /.cdrom failed.
	/sbin/mount | grep "^/.cdrom"
	if [ $? -ne 0 ]
	then
		echo "** FATAL **: Unable to access media"
		exit $SMF_EXIT_ERR_FATAL
	fi

	solaris_zlib="/.cdrom/solaris.zlib"
	solarismisc_zlib="/.cdrom/solarismisc.zlib"

	prtconf -v /devices > /.devp
	toram=`sed -n '/toram/{;n;p;}' /.devp | cut -f 2 -d\'`

	if [  "$toram" = "on" ]; then
		echo "Trying to mount swap" >/dev/msglog
		/usr/lib/fs/tmpfs/mount swap /tmp 2>/dev/msglog
		if [ $? -ne 0 ]
		then
			echo "Unable to mount swap" >/dev/msglog
			exit $SMF_EXIT_ERR_FATAL
		fi
		mkdir /tmp/.cdrom

		echo "Copying usr archive to RAM" >/dev/msglog
		/usr/bin/touch /tmp/.cdrom/solaris.zlib 2>/dev/msglog
		copy /.cdrom/solaris.zlib /tmp/.cdrom/solaris.zlib 2>/dev/msglog
		if [ $? -ne 0 ];then
			echo "Copy unsuccessful. Insufficient RAM ?" >/dev/msglog
			exit $SMF_EXIT_ERR_FATAL
		fi

		echo "Copying install archive to RAM" >/dev/msglog
		/usr/bin/touch /tmp/.cdrom/archive.7z 2>/dev/msglog
		copy /.cdrom/archive.7z /tmp/.cdrom/archive.7z 2>/dev/msglog
		if [ $? -ne 0 ];then
			echo "Copy unsuccessful. Insufficient RAM ?" >/dev/msglog
			exit $SMF_EXIT_ERR_FATAL
		fi

		echo "Copying misc archive to RAM" >/dev/msglog
		/usr/bin/cp /.cdrom/solarismisc.zlib /tmp/.cdrom/ 2>/dev/msglog
		if [ $? -ne 0 ];then
			echo "Copy unsuccessful. Insufficient RAM ?" >/dev/msglog
			exit $SMF_EXIT_ERR_FATAL
		fi

		echo "Copying misc files ..." >/dev/msglog
		(cd /.cdrom; /usr/bin/cp -rP bin boot dev devices info jack \
			mnt noautoshutdown platform reconfigure root \
			AUTORUN.INF /tmp/.cdrom)

		solaris_zlib="/tmp/.cdrom/solaris.zlib"
		solarismisc_zlib="/tmp/.cdrom/solarismisc.zlib"
	fi

	# Explictly create lofi devices for solaris.zlib and 
	# solarismisc.zlib

	/usr/sbin/lofiadm -a $solaris_zlib /dev/lofi/1 || break
	/sbin/mount -F hsfs -o ro /dev/lofi/1 /usr 
	if [ $? -ne 0 ]
	then
		echo "/usr MOUNT FAILED!" 
		exit $SMF_EXIT_ERR_FATAL
	fi

	/usr/sbin/lofiadm -a $solarismisc_zlib /dev/lofi/2 || break
	/sbin/mount -F hsfs -o ro /dev/lofi/2 /mnt/misc
	if [ $? -ne 0 ]
	then
		echo "/mnt/misc MOUNT FAILED!"
		exit $SMF_EXIT_ERR_FATAL
	fi

	/sbin/umount /.cdrom
	/sbin/mount -F lofs /tmp/.cdrom /.cdrom
	MOUNTED=1
	echo "Done mounting Live image" > /dev/msglog
fi

if [ "$MOUNTED" -ne 1 ]
then
    echo "** FATAL **: Unable to mount Live image!" > /dev/msglog
    exit $SMF_EXIT_ERR_FATAL
fi

#
# Root is already mounted (by the kernel), but still needs to be
# checked, possibly remounted and entered into mnttab. First
# mount /usr read only if it is a separate file system. This must
# be done first to allow utilities such as fsck and setmnt to
# reside on /usr minimizing the space required by the root file
# system.
#
readvfstab "/usr" < $vfstab
if [ -n "$mountp" ]; then
	if [ "$fstype" = cachefs ]; then
		#
		# Mount without the cache initially.  We'll enable it
		# later at remount time.  This lets us avoid
		# teaching the statically linked mount program about
		# cachefs.  Here we determine the backfstype.
		# This is not pretty, but we have no tools for parsing
		# the option string until we get /usr mounted...
		#
		case "$mntopts" in
		*backfstype=nfs*)
			cfsbacktype=nfs
			;;
		*backfstype=hsfs*)
			cfsbacktype=hsfs
			;;
		*)
			msg='invalid vfstab entry for /usr'
			echo $msg
			echo "$SMF_FMRI:" $msg >/dev/msglog
			cfsbacktype=nfs
			;;
		esac
		mountfs - /usr $cfsbacktype ro $special ||
		    exit $SMF_EXIT_ERR_FATAL
	else
		#
		# Must use -o largefiles here to ensure the
		# read-only mount does not fail as a result of
		# having a large file present on /usr. This gives
		# fsck a chance to fix up the largefiles flag
		# before we remount /usr read-write.
		#
		if [ "x$mntopts" = x- ]; then
			mntopts='ro,largefiles'
		else
			checkopt largefiles $mntopts
			if [ "x$option" != xlargefiles ]; then
				mntopts="largefiles,$mntopts"
			fi

			checkopt ro $mntopts
			if [ "x$option" != xro ]; then
				mntopts="ro,$mntopts"
			fi

			#
			# Requesting logging on a read-only mount
			# causes errors to be displayed, so remove
			# "logging" from the list of options for now.
			# The read-write mount performed later will
			# specify the logging option if appropriate.
			#

			checkopt logging $mntopts
			if [ "x$option" = xlogging ]; then
				mntopts="$otherops"
			fi
		fi

		mountfs -O /usr $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
	fi
fi

#
# Also mount /boot now so that things like keymap.sh can access
# boot properties through eeprom.  Readonly isn't required because
# /boot (and other pcfs filesystems) aren't fsck'ed at boot yet.
# Also, we don't account for caching /boot as it must be on a local
# disk.  So what's in vfstab is fine as it stands; just look to see
# if it's there and avoid the mount if not.
#
readvfstab "/boot" < $vfstab

if [ -n "$mountp" ]; then
	mountfs - /boot $fstype $mntopts - || exit $SMF_EXIT_ERR_FATAL
fi

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

[ -f /etc/.dynamic_routing ] && /usr/bin/rm -f /etc/.dynamic_routing

libc_mount

# 
# Discover architecture and find and mount optimal libc_psr 
#  
PLAT=`/usr/bin/uname -i` 
ARCH=`/usr/bin/uname -m` 
if [ "$ARCH" = "sun4v" ]; then 
	sun4v_libc_psr_mount 
elif [ "$ARCH" = "sun4u" ]; then 
	if [ -h /platform/$PLAT/lib/libc_psr.so.1 ]; then 
		LINKSTO=`/usr/bin/ls -l /platform/$PLAT/lib/libc_psr.so.1 | 
			/usr/bin/awk '{print $NF}'` 
		if [ "$LINKSTO" = "../../sun4u-us3/lib/libc_psr.so.1" ]; then 
			ARCH=sun4u-us3 
		fi
	fi
	sun4u_libc_psr_mount 
fi

if [ $LIVECD = 1 ]
then
	/usr/bin/rm -f /etc/svc/repository-boot*

	# Mount opt
	/usr/sbin/mount -F lofs /mnt/misc/opt /opt
	
	#
	# Ask user to configure Keyboard Layout
	#
	TERM=sun-color
	export TERM
	exec </dev/console >/dev/console 2>&1
	kbd -s

	#
	# Ask user to configure Language
	#
	#/usr/sbin/set_lang.bash

	livemode=`sed -n '/livemode/{;n;p;}' /.devp | cut -f 2 -d\'`
	if [ "$livemode" = "text" ]; then
		#svcadm disable -t application/graphical-login/gdm
		svcadm disable -t application/xserver
		echo "3" > /.desk
		chmod 0777 /.desk
	else
		#
		# Now select which desktop to run
		#
		/usr/bin/setup.sh

		#/usr/sbin/svcadm enable application/graphical-login/gdm
		[ -f /.desk ] || echo "1" > /.desk
		/usr/sbin/svcadm enable application/xserver
		chmod 0777 /.desk
	fi

fi

exit 0
