#!/usr/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing per-missions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#
# Generate USB image from iso



#usbcopy
set -x;
let i=0
mnt=/mnt/installusb
microroot=/mnt/microroot

rmdir -f $mnt 2>/dev/null
rmdir -f $microroot 2>/dev/null

#nawk script to o/p the details of plugged in USB drives
rmformat 2>/dev/null | nawk 'BEGIN {
      FS = ":";
      lnode=0;
      physdev="";
      node = "";
      devname = "";
      bus = "";
      size = 0;
      bustype = "USB";
} {
      if (lnode == 1 && match($1, "Logical Node")) {
              if (match(bus, bustype))
                      printf("%s\t%s\t%s\t%s\n", physdev, node, size, devname);
              node = $2;
      } else {
              if (match($1, "Logical Node")) {
                      lnode = 1;
                      node = $2;
	      } else if (match($1, "Bus")) {
		      bus=$2
              } else if (match($1, "Connected Device")) {
                      devname = $2;
              } else if (match($1, "Size")) {
                      size = $2;
              } else if (match($1, "Physical Node")) {
		      physdev=$2
	      }
      }
} END {
      if (lnode == 1) {
              if (match(bus, bustype))
                       printf("%s\t%s\t%s\t%s\n", physdev, node, size, devname);
      }
}' >/tmp/ulst

while read p l s m d; do
	phys[$i]=$p
	log[$i]=$l
	size[$i]=$s
	mult[$i]=$m
	desc[$i]=$d
	let i=$i+1
done </tmp/ulst
rm /tmp/ulst

echo Found the following USB devices:
let j=0
while [ $j -lt $i ]; do
	echo "$j:	${log[$j]}	${size[$j]} ${mult[$j]}	${desc[$j]}"
	let j=$j+1
done
while read -p "Enter the number of your choice: " choice; do
	if [ -z "${choice}" ]; then
		continue
	fi
	if [ $choice -lt 0 ] || [ $choice -ge $i ]; then
		echo "Invalid choice"
		continue
	fi
	break
done

dev=${log[$choice]}
s0cdev=`echo $dev|sed -e 's/p0/s0/'`
s0bdev=`echo $s0cdev|sed -e 's/rdsk/dsk/'`
if [ ! -b $s0bdev ] || [ ! -c $s0cdev ]; then
	echo "Missing device nodes for $dev"
	exit 1
fi

if [ ! -n "$dev" ]; then
       echo INFORMATION: No USB selected/found.. Please plug in and try again
       exit 1
fi

sz=${size[$choice]}
multiplier=${mult[$choice]}

if [ "$multiplier" = "GB" ]; then
       lvalue=`echo $sz | cut -f1 -d"."`
       rvalue=`echo $sz | cut -f2 -d"."`
       lvalue=`expr $lvalue \* 1000`
       rvalue=`expr $rvalue \* 100`
       sz=`expr $lvalue + $rvalue`
else
       sz=`echo $sz | cut -f1 -d"."`
fi

while true;
do
       echo ""
       echo WARNING: All data on your USB storage will be lost.
       echo Are you sure you want to install to
       echo -n ${desc[$choice]}, $sz MB at $dev ?
       read -p "(y/n) " yn
       case $yn in
       y* | Y* )
               break ;;
       [nN]* )
       	       echo "Installation aborted"
	       exit 0 ;;
       * )
       	       echo Invalid choice.. Exiting ;exit 0;;
       esac
done

# Ensure we have things unmounted
umount -f $s0bdev

# Install fdisk table with Solaris using entire disk, default VTOC
fdisk -B $dev

# Now create root partition.  We want to find number of cylinders in backup
# partition from label created by fdisk -B and then generate root partition
# using whole disk minus cylinder 1
acyls=`prtvtoc $dev | grep accessible | awk '{ print $2 }'`
cyls=`expr ${acyls} - 1`
format -e $dev >/dev/null <<EOF
pa
0
root
wm
1
${cyls}c
label
0
y
EOF

#now format it using ufs
echo $dev
echo $s0bdev
echo $s0cdev



newfs -m 0 $s0cdev < /dev/null 2> /dev/null
mkdir $mnt
mount $s0bdev $mnt

#copy all the files from usb to cd
cp -rP@ /.cdrom/* $mnt 2>/dev/null

#install grub
installgrub -mf $mnt/boot/grub/stage1 $mnt/boot/grub/stage2 $s0cdev

umount $s0bdev
rmdir $mnt

exit 0;

