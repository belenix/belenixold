#!/sbin/sh
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License, Version 1.0 only
# (the "License").  You may not use this file except in compliance
# with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
#
# Copyright 2007 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

# 0.  Initialization.

[ $# != 2 ] && echo "Usage: mkrepo <rootdir> <srcdir>" && exit 1

ROOTDIR=$1
SRCDIR=$2
SVCCFG_DTD=${ROOTDIR}/usr/share/lib/xml/dtd/service_bundle.dtd.1
SVCCFG_REPOSITORY=${ROOTDIR}/etc/svc/repository.db

export SVCCFG_DTD SVCCFG_REPOSITORY


X=
[ -f /lib/svc/share/smf_include.sh ] || exit 1

svccfg_apply () {
	$X /usr/sbin/svccfg apply $1
	if [ $? -ne 0 ]; then
		echo "WARNING: svccfg apply $1 failed" | tee /dev/msglog
	fi
}

svccfg_import () {
	$X /usr/sbin/svccfg import $1 2>>/tmp/manifest_import.$$
	if [ $? -ne 0 ]; then
		echo > /dev/msglog
		echo "WARNING: svccfg import $1 failed" | tee /dev/msglog
	fi
}


#
# 2.  Manifest import.  Application directories first, then
# site-specific manifests.
#
nonsite_dirs=`/usr/bin/find ${ROOTDIR}/var/svc/manifest/* -name site -prune -o -type d \
	-print -prune`

nonsite_manifests=`${ROOTDIR}/lib/svc/bin/mfstscan $nonsite_dirs`
site_manifests=`${ROOTDIR}/lib/svc/bin/mfstscan ${ROOTDIR}/var/svc/manifest/site`

manifests="$nonsite_manifests $site_manifests"

[ -n "$_MFST_DEBUG" ] && {
	echo "Changed manifests to import:"
	for m in $manifests; do echo "  $m"; done
}

#
# 2b.  Import the manifests while giving a running display of imports on
# console, and a final count in the logfile.
#
if [ -n "$nonsite_manifests" -o -n "$site_manifests" ]; then
	rm -f /tmp/manifest_import.$$

	set -- $manifests
	backup=`echo "$#/$#" | sed 's/.//g'`
	fwidth=`echo "$#\c" | wc -c`

	echo "Loading smf(5) service descriptions: \c"

	i=1; n=$#
	while [ $# -gt 0 ]; do
		printf "%${fwidth}s/%${fwidth}s" $i $n
		svccfg_import $1
		i=`expr $i + 1`
		shift
		echo "$backup\c"
	done

	echo
	echo "Loaded $n smf(5) service descriptions"
	activity=true

	if [ -s /tmp/manifest_import.$$ ]; then
		echo "svccfg warnings:"
		cat /tmp/manifest_import.$$

		msg="svccfg import warnings.  See"
		msg="$msg ${ROOTDIR}/var/svc/log/system-manifest-import:default.log ."
		echo $msg
	fi
	rm -f /tmp/manifest_import.$$
fi

#
# 3.  Profile application.  We must create the platform profile upon
# first boot, as we may be a diskless client of a platform or
# architecture distinct from our NFS server.
#
svccfg_apply ${ROOTDIR}/var/svc/profile/generic_limited_net.xml

if [ ! -f ${ROOTDIR}/var/svc/profile/platform.xml ]; then
	this_karch=`uname -m`
	this_plat=`uname -i`

	if [ -f ${ROOTDIR}/var/svc/profile/platform_$this_plat.xml ]; then
		platform_profile=platform_$this_plat.xml
	elif [ -f ${ROOTDIR}/var/svc/profile/platform_$this_karch.xml ]; then
		platform_profile=platform_$this_karch.xml
	else
		platform_profile=platform_none.xml
	fi

	(cd ${ROOTDIR}/var/svc/profile; ln -s $platform_profile platform.xml)
fi

svccfg_apply ${ROOTDIR}/var/svc/profile/platform.xml

# Apply Live environment modifications
svccfg_apply ${ROOTDIR}/var/svc/profile/generic_live.xml

# Apply name service profile
svccfg_apply ${ROOTDIR}/var/svc/profile/ns_files.xml

# Dummy out start methods for services we need to run, but as no-ops
svccfg -s system/boot-archive setprop start/exec=:true
svccfg -s system/manifest-import setprop start/exec=:true
svccfg -s system/rmtmpfiles setprop start/exec=:true
svccfg -s system/sysidtool:net setprop start/exec=:true
svccfg -s system/sysidtool:system setprop start/exec=:true
svccfg -s system/scheduler setprop start/exec=:true
svccfg -s system/zones setprop start/exec=:true
svccfg -s application/font/fc-cache setprop start/exec=:true

#
# Increase timeout to avoid error messages. Default
# of 30 seconds is not enough for some services when
# starting from a slow device like a DVD drive.
#
svccfg -s system/dbus setprop start/timeout_seconds=90
svccfg -s application/opengl/ogl-select setprop start/timeout_seconds=90
svccfg -s application/xserver setprop start/timeout_seconds=120

exit 0
