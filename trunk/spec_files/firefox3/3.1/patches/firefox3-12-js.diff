diff --git a/js/src/nanojit/Assembler.cpp b/js/src/nanojit/Assembler.cpp
--- a/js/src/nanojit/Assembler.cpp
+++ b/js/src/nanojit/Assembler.cpp
@@ -1516,17 +1516,17 @@ namespace nanojit
 			if (_verbose) {
 				memset(s, ' ', 51);  s[51] = '\0';
 				s += strlen(s);
 				sprintf(s, " ebp ");
 				s += strlen(s);
 
 				for(uint32_t i=_activation.lowwatermark; i<_activation.tos;i++) {
 					LInsp ins = _activation.entry[i];
-					if (ins /* && _activation.entry[i]!=_activation.entry[i+1]*/) {
+					if (ins) {
 						sprintf(s, "%d(%s) ", -4*i,_thisfrag->lirbuf->names->formatRef(ins));
 						s += strlen(s);
 					}
 				}
 				output(&outline[0]);
 			}
 		)
 #endif
diff --git a/js/src/nanojit/LIR.h b/js/src/nanojit/LIR.h
--- a/js/src/nanojit/LIR.h
+++ b/js/src/nanojit/LIR.h
@@ -160,19 +160,19 @@ namespace nanojit
     }
 
     inline bool isLoad(LOpcode op) {
         return op == LIR_ldq || op == LIR_ld || op == LIR_ldc || op == LIR_ldqc || op == LIR_ldcs;
     }
 
 	// Sun Studio requires explicitly declaring signed int bit-field
 	#if defined(__SUNPRO_C) || defined(__SUNPRO_CC)
-	#define _sign_ signed 
+	#define _sign_int signed int
 	#else
-	#define _sign_
+	#define _sign_int int32_t
 	#endif
 
 	// Low-level Instruction 4B
 	// had to lay it our as a union with duplicate code fields since msvc couldn't figure out how to compact it otherwise.
 	class LIns
 	{
         friend class LirBufWriter;
 		// 3-operand form (backwards reach only)
@@ -182,17 +182,17 @@ namespace nanojit
 			uint32_t		oprnd_3:8;	// only used for store, since this location gets clobbered during generation
 			uint32_t		oprnd_1:8;  // 256 ins window and since they only point backwards this is sufficient.
 			uint32_t		oprnd_2:8;  
 		};
 
         struct sti_type
         {
 			LOpcode			code:8;
-			_sign_ int32_t	disp:8;
+			_sign_int		disp:8;
 			uint32_t		oprnd_1:8;  // 256 ins window and since they only point backwards this is sufficient.
 			uint32_t		oprnd_2:8;  
         };
 
 		// imm8 form 
 		struct c_type
 		{
 			LOpcode			code:8;
@@ -200,25 +200,25 @@ namespace nanojit
 			uint32_t		imm8a:8;
 			uint32_t		imm8b:8;  
 		};
 
         // imm24 form for short tramp & skip
         struct t_type
         {
             LOpcode         code:8;
-            _sign_ int32_t  imm24:24;
+            _sign_int       imm24:24;
         };
 
 		// imm16 form
 		struct i_type
 		{
 			LOpcode			code:8;
 			uint32_t		resv:8;  // cobberred during assembly
-			_sign_ int32_t  imm16:16;
+			_sign_int		imm16:16;
 		};
 
 		// overlay used during code generation ( note that last byte is reserved for allocation )
 		struct g_type
 		{
 			LOpcode			code:8;
 			uint32_t		resv:8;   // cobberred during assembly
 			uint32_t		unused:16;
