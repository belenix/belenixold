--- ortp-0.13.1.orig/src/rtcpparse.c	2007-01-15 11:47:21.000000000 -0500
+++ ortp-0.13.1/src/rtcpparse.c	2008-05-16 20:19:39.000000000 -0400
@@ -24,7 +24,7 @@
 
 /*in case of coumpound packet, set read pointer of m to the beginning of the next RTCP
 packet */
-bool_t rtcp_next_packet(mblk_t *m){
+bool_t rtcp_next_packet(ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch){
 		int nextlen=sizeof(rtcp_common_header_t)+
@@ -37,16 +37,16 @@
 	return FALSE;
 }
 
-void rtcp_rewind(mblk_t *m){
+void rtcp_rewind(ortp_mblk_t *m){
 	m->b_rptr=m->b_datap->db_base;
 }
 
 /* get common header; this function will also check the sanity of the packet*/
-const rtcp_common_header_t * rtcp_get_common_header(const mblk_t *m){
+const rtcp_common_header_t * rtcp_get_common_header(const ortp_mblk_t *m){
 	int size=msgdsize(m);
 	rtcp_common_header_t *ch;
 	if (m->b_cont!=NULL){
-		ortp_fatal("RTCP parser does not work on fragmented mblk_t. Use msgpullup() before to re-assemble the packet.");
+		ortp_fatal("RTCP parser does not work on fragmented ortp_mblk_t. Use msgpullup() before to re-assemble the packet.");
 		return NULL;
 	}
 	if (size<sizeof(rtcp_common_header_t)){
@@ -57,7 +57,7 @@
 	return ch;
 }
 
-bool_t rtcp_is_SR(const mblk_t *m){
+bool_t rtcp_is_SR(const ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch!=NULL && rtcp_common_header_get_packet_type(ch)==RTCP_SR){
 		if (msgdsize(m)<sizeof(rtcp_sr_t)){
@@ -70,17 +70,17 @@
 }
 
 /*Sender Report accessors */
-uint32_t rtcp_SR_get_ssrc(const mblk_t *m){
+uint32_t rtcp_SR_get_ssrc(const ortp_mblk_t *m){
 	rtcp_sr_t *sr=(rtcp_sr_t*)m->b_rptr;
 	return ntohl(sr->ssrc);
 }
 
-const sender_info_t * rtcp_SR_get_sender_info(const mblk_t *m){
+const sender_info_t * rtcp_SR_get_sender_info(const ortp_mblk_t *m){
 	rtcp_sr_t *sr=(rtcp_sr_t*)m->b_rptr;
 	return &sr->si;
 }
 
-const report_block_t * rtcp_SR_get_report_block(const mblk_t *m, int idx){
+const report_block_t * rtcp_SR_get_report_block(const ortp_mblk_t *m, int idx){
 	rtcp_sr_t *sr=(rtcp_sr_t*)m->b_rptr;
 	report_block_t *rb=&sr->rb[idx];
 	int size=sizeof(rtcp_common_header_t)+(4*rtcp_common_header_get_length(&sr->ch));
@@ -95,7 +95,7 @@
 }
 
 /*Receiver report accessors*/
-bool_t rtcp_is_RR(const mblk_t *m){
+bool_t rtcp_is_RR(const ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch!=NULL && rtcp_common_header_get_packet_type(ch)==RTCP_RR){
 		if (msgdsize(m)<sizeof(rtcp_rr_t)){
@@ -107,12 +107,12 @@
 	return FALSE;
 }
 
-uint32_t rtcp_RR_get_ssrc(const mblk_t *m){
+uint32_t rtcp_RR_get_ssrc(const ortp_mblk_t *m){
 	rtcp_rr_t *rr=(rtcp_rr_t*)m->b_rptr;
 	return ntohl(rr->ssrc);
 }
 
-const report_block_t * rtcp_RR_get_report_block(const mblk_t *m,int idx){
+const report_block_t * rtcp_RR_get_report_block(const ortp_mblk_t *m,int idx){
 	rtcp_rr_t *rr=(rtcp_rr_t*)m->b_rptr;
 	report_block_t *rb=&rr->rb[idx];
 	int size=sizeof(rtcp_common_header_t)+(4*rtcp_common_header_get_length(&rr->ch));
@@ -127,7 +127,7 @@
 }
 
 /*SDES accessors */
-bool_t rtcp_is_SDES(const mblk_t *m){
+bool_t rtcp_is_SDES(const ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch && rtcp_common_header_get_packet_type(ch)==RTCP_SDES){
 		if (msgdsize(m)<sizeof(rtcp_common_header_t)+
@@ -140,7 +140,7 @@
 	return FALSE;
 }
 
-void rtcp_sdes_parse(const mblk_t *m, SdesItemFoundCallback cb, void *user_data){
+void rtcp_sdes_parse(const ortp_mblk_t *m, SdesItemFoundCallback cb, void *user_data){
 	uint8_t *rptr=(uint8_t*)m->b_rptr+sizeof(rtcp_common_header_t);
 	const rtcp_common_header_t *ch=(rtcp_common_header_t*)m->b_rptr;
 	uint8_t *end=rptr+sizeof(rtcp_common_header_t)+
@@ -192,7 +192,7 @@
 }
 
 /*BYE accessors */
-bool_t rtcp_is_BYE(const mblk_t *m){
+bool_t rtcp_is_BYE(const ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch && rtcp_common_header_get_packet_type(ch)==RTCP_BYE){
 		if (msgdsize(m)<sizeof(rtcp_common_header_t)+
@@ -205,7 +205,7 @@
 	return FALSE;
 }
 
-bool_t rtcp_BYE_get_ssrc(const mblk_t *m, int idx, uint32_t *ssrc){
+bool_t rtcp_BYE_get_ssrc(const ortp_mblk_t *m, int idx, uint32_t *ssrc){
 	rtcp_bye_t *bye=(rtcp_bye_t*)m->b_rptr;
 	int rc=rtcp_common_header_get_rc(&bye->ch);
 	int len=rtcp_common_header_get_length(&bye->ch);
@@ -221,7 +221,7 @@
 	return FALSE;
 }
 
-bool_t rtcp_BYE_get_reason(const mblk_t *m, const char **reason, int *reason_len){
+bool_t rtcp_BYE_get_reason(const ortp_mblk_t *m, const char **reason, int *reason_len){
 	rtcp_bye_t *bye=(rtcp_bye_t*)m->b_rptr;
 	int rc=rtcp_common_header_get_rc(&bye->ch);
 	int len=rtcp_common_header_get_length(&bye->ch);
@@ -242,7 +242,7 @@
 }
 
 /*APP accessors */
-bool_t rtcp_is_APP(const mblk_t *m){
+bool_t rtcp_is_APP(const ortp_mblk_t *m){
 	const rtcp_common_header_t *ch=rtcp_get_common_header(m);
 	if (ch!=NULL && rtcp_common_header_get_packet_type(ch)==RTCP_APP){
 		if (msgdsize(m)<sizeof(rtcp_common_header_t)+
@@ -260,22 +260,22 @@
 	return FALSE;
 }
 
-int rtcp_APP_get_subtype(const mblk_t *m){
+int rtcp_APP_get_subtype(const ortp_mblk_t *m){
 	rtcp_app_t *app=(rtcp_app_t*)m->b_rptr;
 	return rtcp_common_header_get_rc(&app->ch);
 }
 
-uint32_t rtcp_APP_get_ssrc(const mblk_t *m){
+uint32_t rtcp_APP_get_ssrc(const ortp_mblk_t *m){
 	rtcp_app_t *app=(rtcp_app_t*)m->b_rptr;
 	return ntohl(app->ssrc);
 }
 /* name argument is supposed to be at least 4 characters (note: no '\0' written)*/
-void rtcp_APP_get_name(const mblk_t *m, char *name){
+void rtcp_APP_get_name(const ortp_mblk_t *m, char *name){
 	rtcp_app_t *app=(rtcp_app_t*)m->b_rptr;
 	memcpy(name,app->name,4);
 }
-/* retrieve the data. when returning, data points directly into the mblk_t */
-void rtcp_APP_get_data(const mblk_t *m, uint8_t **data, int *len){
+/* retrieve the data. when returning, data points directly into the ortp_mblk_t */
+void rtcp_APP_get_data(const ortp_mblk_t *m, uint8_t **data, int *len){
 	rtcp_app_t *app=(rtcp_app_t*)m->b_rptr;
 	int datalen=sizeof(rtcp_common_header_t)+rtcp_common_header_get_length(&app->ch)-8;
 	if (datalen>0){
@@ -338,7 +338,7 @@
 
 }
 
-void rtp_session_rtcp_parse(RtpSession *session, mblk_t *mp)
+void rtp_session_rtcp_parse(RtpSession *session, ortp_mblk_t *mp)
 {
   rtcp_common_header_t *rtcp;
   int msgsize;
