--- dasher-4.10.0/Src/DasherCore/ModuleManager.h-orig	2009-03-17 13:35:31.290034000 -0500
+++ dasher-4.10.0/Src/DasherCore/ModuleManager.h	2009-03-17 14:12:53.411758000 -0500
@@ -48,7 +48,7 @@ class CModuleManager {
 
  private:
   std::vector<CDasherModule *> m_vModules;
-  std::map<const std::string, ModuleID_t> m_mapNameToID;
+  std::map<std::string, ModuleID_t> m_mapNameToID;
   CDasherModule *m_pDefaultInputDevice;
   CDasherModule *m_pDefaultInputMethod;
 };
--- dasher-4.10.0/Src/DasherCore/ModuleManager.cpp-orig	2009-03-17 13:53:45.978381000 -0500
+++ dasher-4.10.0/Src/DasherCore/ModuleManager.cpp	2009-03-17 14:26:27.416888000 -0500
@@ -33,7 +33,7 @@ CDasherModule *CModuleManager::RegisterM
     // This does
     //     m_mapNameToID[pModule->GetName()] = id;
     // but with error checking.
-    std::pair<std::map<const std::string, ModuleID_t>::iterator, bool> res;
+    std::pair<std::map<std::string, ModuleID_t>::iterator, bool> res;
     std::pair<const std::string, ModuleID_t> keyvalue(pModule->GetName(), id);
     res = m_mapNameToID.insert(keyvalue);
     if (!res.second)
@@ -60,7 +60,7 @@ CDasherModule *CModuleManager::GetModule
     // This does
     //    return m_vModules[m_mapNameToID[strName]];
     // but with error checking.
-    std::map<const std::string, ModuleID_t>::iterator res;
+    std::map<std::string, ModuleID_t>::iterator res;
     res = m_mapNameToID.find(strName);
     if (res == m_mapNameToID.end()) {
         std::cerr << "Module \"" << strName << "\" not registered" <<std::endl;
