diff -Nrup gnome-system-monitor-2.25.91/configure.in gnome-system-monitor-2.25.91.mod/configure.in
--- gnome-system-monitor-2.25.91/configure.in	2009-02-17 02:07:36.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/configure.in	2009-03-04 10:31:31.831892000 +0800
@@ -56,13 +56,13 @@ if test "$GCC" = "yes" -a "$set_more_war
     -Wcast-align -Wsign-compare \
     -std=gnu89 \
     $CFLAGS"
-    CXXFLAGS="-Wall -std=c++98 $CXXFLAGS"
+    CXXFLAGS="-Wall -std=c++98 $CXXFLAGS -features=extensions"
 else
     AC_MSG_RESULT(no)
 fi
 
-dnl CXXFLAGS="-fvisibility=hidden -fvisibility-inlines-hidden $CXXFLAGS"
-dnl CXXFLAGS="-fvisibility-inlines-hidden $CXXFLAGS"
+dnl CXXFLAGS="-fvisibility=hidden -fvisibility-inlines-hidden -features=extensions $CXXFLAGS"
+dnl CXXFLAGS="-fvisibility-inlines-hidden -features=extensions $CXXFLAGS"
 
 AM_GCONF_SOURCE_2
 
diff -Nrup gnome-system-monitor-2.25.91/src/load-graph.cpp gnome-system-monitor-2.25.91.mod/src/load-graph.cpp
--- gnome-system-monitor-2.25.91/src/load-graph.cpp	2008-08-31 21:29:57.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/load-graph.cpp	2009-03-04 11:26:07.230508000 +0800
@@ -405,7 +405,7 @@ net_scale (LoadGraph *g, unsigned din, u
 	// where factor10 is integer and x < 10
 	// so we new_max has only 1 significant digit
 
-	unsigned factor10 = std::pow(10.0, std::floor(std::log10(coef10)));
+	unsigned factor10 = std::pow(10.0, std::floor(std::log10((double)coef10)));
 	coef10 = std::ceil(coef10 / double(factor10)) * factor10;
 
 	// then make coef10 divisible by num_bars
@@ -414,10 +414,10 @@ net_scale (LoadGraph *g, unsigned din, u
 	g_assert(coef10 % g->num_bars() == 0);
 
 	new_max = coef10 * (1UL << (base10 * 10));
-	procman_debug("bak %u new_max %u pow2 %u coef10 %u", bak_max, new_max, pow2, coef10);
+	//procman_debug("bak %u new_max %u pow2 %u coef10 %u", bak_max, new_max, pow2, coef10);
 
 	if (bak_max > new_max) {
-	  procman_debug("overflow detected: bak=%u new=%u", bak_max, new_max);
+	  //procman_debug("overflow detected: bak=%u new=%u", bak_max, new_max);
 	  new_max = bak_max;
 	}
 
@@ -435,7 +435,7 @@ net_scale (LoadGraph *g, unsigned din, u
 		}
 	}
 
-	procman_debug("rescale dmax = %u max = %u new_max = %u", dmax, g->net.max, new_max);
+	//procman_debug("rescale dmax = %u max = %u new_max = %u", dmax, g->net.max, new_max);
 
 	g->net.max = new_max;
 
@@ -457,6 +457,24 @@ get_net (LoadGraph *g)
 	unsigned din, dout;
 	gchar *text1;
 
+	/* we have to optimize the performance of libgtop, because in some low
+	   level machine, to update the information will occupy too much cpu.
+
+	   Here I would like to make a little update:
+	     set netlist.flags=1
+	   so as to let glibtop_get_netlist() only return the ones whose first
+	   character of name is the same withthe first one in their module,
+	   glibtop_get_netload() just try to find these devices, for example,
+	   bge0 and bge...
+
+	   We do the check in glibtop_get_netlist(), I think this will
+	   accelerate the transaction lots. Also this will not affect the
+	   existing codes, because when nobody set glibtop_netlist.flags,
+	  glibtop_get_netlist() will return all devices with class "net".
+	*/
+
+	netlist.flags = 1;
+
 	ifnames = glibtop_get_netlist(&netlist);
 
 	for (i = 0; i < netlist.number; ++i)
diff -Nrup gnome-system-monitor-2.25.91/src/lsof.cpp gnome-system-monitor-2.25.91.mod/src/lsof.cpp
--- gnome-system-monitor-2.25.91/src/lsof.cpp	2008-05-24 05:44:00.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/lsof.cpp	2009-03-04 10:16:57.082704000 +0800
@@ -95,13 +95,13 @@ namespace
 
     GUI()
     {
-      procman_debug("New Lsof GUI %p", this);
+      //procman_debug("New Lsof GUI %p", this);
     }
 
 
     ~GUI()
     {
-      procman_debug("Destroying Lsof GUI %p", this);
+      //procman_debug("Destroying Lsof GUI %p", this);
     }
 
 
diff -Nrup gnome-system-monitor-2.25.91/src/openfiles.cpp gnome-system-monitor-2.25.91.mod/src/openfiles.cpp
--- gnome-system-monitor-2.25.91/src/openfiles.cpp	2008-09-12 03:55:34.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/openfiles.cpp	2009-03-04 11:54:44.460430000 +0800
@@ -67,7 +67,7 @@ friendlier_hostname(const char *addr_str
 		goto failsafe;
 
 	if (getnameinfo(res->ai_addr, res->ai_addrlen, hostname,
-			sizeof hostname, service, sizeof service, NI_IDN))
+			sizeof hostname, service, sizeof service, NI_MAXSERV))
 		goto failsafe;
 
 	if (res) freeaddrinfo(res);
diff -Nrup gnome-system-monitor-2.25.91/src/prettytable.cpp gnome-system-monitor-2.25.91.mod/src/prettytable.cpp
--- gnome-system-monitor-2.25.91/src/prettytable.cpp	2009-01-19 02:01:09.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/prettytable.cpp	2009-03-04 10:17:07.130460000 +0800
@@ -77,7 +77,7 @@ PrettyTable::register_application(pid_t 
       info->set_icon(icon);
       // move the ref to the map
       this->apps[pid] = icon;
-      procman_debug("WNCK OK for %u", unsigned(pid));
+      //procman_debug("WNCK OK for %u", unsigned(pid));
     }
 }
 
@@ -229,7 +229,7 @@ PrettyTable::set_icon(ProcInfo &info)
       getters.push_back(&PrettyTable::get_icon_from_name);
       if (has_kthreadd())
 	{
-	  procman_debug("kthreadd is running with PID 2");
+	  //procman_debug("kthreadd is running with PID 2");
 	  getters.push_back(&PrettyTable::get_icon_for_kernel);
 	}
       getters.push_back(&PrettyTable::get_icon_dummy);
diff -Nrup gnome-system-monitor-2.25.91/src/procactions.cpp gnome-system-monitor-2.25.91.mod/src/procactions.cpp
--- gnome-system-monitor-2.25.91/src/procactions.cpp	2007-01-03 06:15:36.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/procactions.cpp	2009-02-22 19:58:20.190256000 +0800
@@ -128,6 +128,15 @@ kill_single_process (GtkTreeModel *model
 	if (!info)
 		return;
 
+	/*
+          * If the process 0 is a system process, we can't control it even as root
+          */
+        if ((args->signal == SIGTERM) || (args->signal == SIGKILL)){
+                if (info->pid == 0)
+                return;
+        }
+        /* if it is not a system process, we can kill it now */
+
 	error = kill (info->pid, args->signal);
 
 	/* success */
diff -Nrup gnome-system-monitor-2.25.91/src/procdialogs.cpp gnome-system-monitor-2.25.91.mod/src/procdialogs.cpp
--- gnome-system-monitor-2.25.91/src/procdialogs.cpp	2008-05-24 05:44:00.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/procdialogs.cpp	2009-03-04 10:17:21.908309000 +0800
@@ -342,7 +342,7 @@ private:
       g_error_free(e);
     }
 
-    procman_debug("set %s to %d", this->gconf_key.c_str(), new_value);
+    //procman_debug("set %s to %d", this->gconf_key.c_str(), new_value);
   }
 
   const string gconf_key;
@@ -659,7 +659,10 @@ procdialog_create_preferences_dialog (Pr
 	gtk_box_pack_start (GTK_BOX (hbox2), hbox3, TRUE, TRUE, 0);
 			  
 	update = (gfloat) procdata->config.graph_update_interval;
-	adjustment = (GtkAdjustment *) gtk_adjustment_new(update / 1000.0, 0.25, 
+       /* The interval is too small, and in some low level machine, 
+	  cause gconf can't work, so set its min value 1 sec*/
+        /*adjustment = (GtkAdjustment *) gtk_adjustment_new(update / 1000.0, 0.25,*/
+        adjustment = (GtkAdjustment *) gtk_adjustment_new(update / 1000.0, 1,
 							  100.0, 0.25, 1.0, 1.0);
 	spin_button = gtk_spin_button_new (adjustment, 1.0, 2);
 	g_signal_connect (G_OBJECT (spin_button), "focus_out_event",
@@ -803,7 +806,7 @@ procdialog_create_root_password_dialog(P
 
 	command = procman_action_to_command(type, pid, extra_value);
 
-	procman_debug("Trying to run '%s' as root", command);
+	//procman_debug("Trying to run '%s' as root", command);
 
 	if (procman_has_gksu())
 		ret = procman_gksu_create_root_password_dialog(command);
diff -Nrup gnome-system-monitor-2.25.91/src/procman.cpp gnome-system-monitor-2.25.91.mod/src/procman.cpp
--- gnome-system-monitor-2.25.91/src/procman.cpp	2009-01-03 20:06:10.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/procman.cpp	2009-03-04 10:22:32.037096000 +0800
@@ -147,7 +147,10 @@ timeouts_changed_cb (GConfClient *client
 		procdata->config.graph_update_interval = gconf_value_get_int (value);
 		procdata->config.graph_update_interval = 
 			MAX (procdata->config.graph_update_interval, 
-			     250);
+		/* The interval is too small, and in some low level machine,
+		   cause gconf can't work, so set its min value 1 sec*/
+		/*           250);*/
+			     1000);
 		load_graph_change_speed(procdata->cpu_graph,
 					procdata->config.graph_update_interval);
 		load_graph_change_speed(procdata->mem_graph,
@@ -332,10 +335,14 @@ procman_data_new (GConfClient *client)
 	/* Sanity checks */
 	swidth = gdk_screen_width ();
 	sheight = gdk_screen_height ();
-	pd->config.width = CLAMP (pd->config.width, 50, swidth);
-	pd->config.height = CLAMP (pd->config.height, 50, sheight);
+	pd->config.width = CLAMP (pd->config.width, 50, swidth-2); /* there is a bug in gtk I think, when the width/height
+								become the biggest, the windows alway biggest, so -2 */
+	pd->config.height = CLAMP (pd->config.height, 50, sheight-2);
 	pd->config.update_interval = MAX (pd->config.update_interval, 1000);
-	pd->config.graph_update_interval = MAX (pd->config.graph_update_interval, 250);
+	/* The interval is too small, and in some low level machine,
+	   cause gconf can't work, so set its min value 1 sec*/
+	/*pd->config.graph_update_interval = MAX (pd->config.graph_update_interval, 250);*/
+	pd->config.graph_update_interval = MAX (pd->config.graph_update_interval, 1000);
 	pd->config.disks_update_interval = MAX (pd->config.disks_update_interval, 1000);
 	pd->config.whose_process = CLAMP (pd->config.whose_process, 0, 2);
 	pd->config.current_tab = CLAMP(pd->config.current_tab,
@@ -598,9 +605,9 @@ cb_server (const gchar *msg, gpointer us
 	procdata = *(ProcData**)user_data;
 	g_assert (procdata != NULL);
 
-	procman_debug("cb_server(%s)", msg);
+	//procman_debug("cb_server(%s)", msg);
 	if (msg != NULL && procman::SHOW_SYSTEM_TAB_CMD == msg) {
-		procman_debug("Changing to PROCMAN_TAB_SYSINFO via bacon message");
+		//procman_debug("Changing to PROCMAN_TAB_SYSINFO via bacon message");
 		gtk_notebook_set_current_page(GTK_NOTEBOOK(procdata->notebook), PROCMAN_TAB_SYSINFO);
 		cb_change_current_page(GTK_NOTEBOOK(procdata->notebook), PROCMAN_TAB_SYSINFO, procdata);
 	} else
@@ -677,7 +684,7 @@ main (int argc, char *argv[])
 
 	Gio::init();
 	Gtk::Main kit(&argc, &argv);
-	procman_debug("post gtk_init");
+	//procman_debug("post gtk_init");
 
 	conn = bacon_message_connection_new ("gnome-system-monitor");
 	if (!conn) g_error("Couldn't connect to gnome-system-monitor");
@@ -715,14 +722,14 @@ main (int argc, char *argv[])
 
 	glibtop_init ();
 
-	procman_debug("end init");
+	//procman_debug("end init");
 	
 	procdata = procman_data_new (client);
 	procdata->client = client;
 
-	procman_debug("begin create_main_window");
+	//procman_debug("begin create_main_window");
 	create_main_window (procdata);
-	procman_debug("end create_main_window");
+	//procman_debug("end create_main_window");
 	
 	// proctable_update_all (procdata);
 
@@ -731,14 +738,14 @@ main (int argc, char *argv[])
 	g_assert(procdata->app);
 			
 	if (option_group.show_system_tab) {
-		procman_debug("Starting with PROCMAN_TAB_SYSINFO by commandline request");
+		//procman_debug("Starting with PROCMAN_TAB_SYSINFO by commandline request");
 		gtk_notebook_set_current_page(GTK_NOTEBOOK(procdata->notebook), PROCMAN_TAB_SYSINFO);
 		cb_change_current_page (GTK_NOTEBOOK(procdata->notebook), PROCMAN_TAB_SYSINFO, procdata);
 	}
 
  	gtk_widget_show(procdata->app);
        
-	procman_debug("begin gtk_main");
+	//procman_debug("begin gtk_main");
 	kit.run();
 	
 	procman_free_data (procdata);
diff -Nrup gnome-system-monitor-2.25.91/src/proctable.cpp gnome-system-monitor-2.25.91.mod/src/proctable.cpp
--- gnome-system-monitor-2.25.91/src/proctable.cpp	2008-09-14 05:25:03.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/proctable.cpp	2009-03-04 12:05:57.166912000 +0800
@@ -197,7 +197,7 @@ search_equal_func(GtkTreeModel *model,
 
 
 GtkWidget *
-proctable_new (ProcData * const procdata)
+proctable_new (ProcData * procdata)
 {
 	GtkWidget *proctree;
 	GtkWidget *scrolled;
@@ -487,6 +487,18 @@ static void get_process_memory_writable(
 	glibtop_proc_map buf;
 	glibtop_map_entry *maps;
 
+	/* we have to optimize the performance of libgtop, because update the information will occupy too much cpu.
+ 
+           here I would like to make a little update:set glibtop_proc_map.flags=1,so as to let glibtop_get_proc_map_s()
+           only return the ones this function need: memwritable
+ 
+           we do the check in glibtop_get_proc_map_s(), don't run the others part which don't need by this function,
+	   I think this will accelerate the transaction lots,
+           Also this will not affect the existing codes, because when nobody set glibtop_proc_map.flags,
+           glibtop_get_proc_map() will return all as before. zhua
+	*/
+	buf.flags = 1;
+ 
 	maps = glibtop_get_proc_map(&buf, info->pid);
 
 	gulong memwritable = 0;
@@ -498,6 +510,9 @@ static void get_process_memory_writable(
 #else
 		if (maps[i].perm & GLIBTOP_MAP_PERM_WRITE)
 			memwritable += maps[i].size;
+			
+                if (maps[i].perm & GLIBTOP_MAP_PERM_SHARED)
+                        info->memshared += maps[i].shared_clean;
 #endif
 	}
 
@@ -517,13 +532,20 @@ get_process_memory_info(ProcInfo *info)
 				      info->pid,
 				      &xresources);
 
-	glibtop_get_proc_mem(&procmem, info->pid);
+	info->memxserver = xresources.total_bytes_estimate;
+
+/* zhua: use get_process_memory_writable(), because it just call glibtop_get_proc_map_s(),
+                can get shared memory and writable memory, others: vmsize & memres, will be 
+		get in procstate from glibtop_get_proc_state()*/	
+/*	glibtop_get_proc_mem(&procmem, info->pid);
+ 
 
 	info->vmsize	= procmem.vsize;
 	info->memres	= procmem.resident;
 	info->memshared	= procmem.share;
 
 	info->memxserver = xresources.total_bytes_estimate;
+*/
 
 	get_process_memory_writable(info);
 
@@ -597,7 +619,7 @@ insert_info_to_tree (ProcInfo *info, Pro
 
 	procdata->pretty_table.set_icon(*info);
 
-	procman_debug("inserted %d%s", info->pid, (forced ? " (forced)" : ""));
+	//procman_debug("inserted %d%s", info->pid, (forced ? " (forced)" : ""));
 }
 
 
@@ -612,12 +634,12 @@ remove_info_from_tree (ProcData *procdat
   GtkTreeIter child_node;
 
   if (std::find(orphans.begin(), orphans.end(), current) != orphans.end()) {
-    procman_debug("[%u] %d already removed from tree", lvl, int(current->pid));
+    //procman_debug("[%u] %d already removed from tree", lvl, int(current->pid));
     return;
   }
 
-  procman_debug("[%u] pid %d, %d children", lvl, int(current->pid),
-		gtk_tree_model_iter_n_children(model, &current->node));
+  //procman_debug("[%u] pid %d, %d children", lvl, int(current->pid),
+	//	gtk_tree_model_iter_n_children(model, &current->node));
 
   // it is not possible to iterate&erase over a treeview so instead we
   // just pop one child after another and recursively remove it and
@@ -655,15 +677,20 @@ update_info (ProcData *procdata, ProcInf
 	glibtop_get_proc_state (&procstate, info->pid);
 	info->status = procstate.state;
 
+        /* zhua: let's delete this call, because we can get the value
+                        from glibtop_get_proc_state
 	glibtop_get_proc_uid (&procuid, info->pid);
+	*/
 	glibtop_get_proc_time (&proctime, info->pid);
 
-	get_process_memory_info(info);
+	get_process_memory_info(info);/* get shared/writable/xserver memory */
 
-	info->set_user(procstate.uid);
+	info->set_user(procstate.uid);/* get user of process */
 
+	/* zhua: let's get from file directly
 	info->pcpu = (proctime.rtime - info->cpu_time) * 100 / procdata->cpu_total_time;
 	info->pcpu = MIN(info->pcpu, 100);
+	*/
 
 	if (procdata->config.solaris_mode)
 	  info->pcpu /= procdata->config.num_cpus;
@@ -671,6 +698,17 @@ update_info (ProcData *procdata, ProcInf
 	ProcInfo::cpu_times[info->pid] = info->cpu_time = proctime.rtime;
 	info->nice = procuid.nice;
 	info->ppid = procuid.ppid;
+
+                /* zhua: get nice/ppid from procstate */
+	//	info->nice = procstate.nice;
+		
+                /* zhua: get start_time from procstate */
+                info->start_time = procstate.start_time;
+
+                info->vmsize    = procstate.vsize;
+                info->memres    = procstate.resident;
+ 
+       //         info->pcpu      = procstate.load;
 }
 
 
@@ -712,7 +750,13 @@ ProcInfo::ProcInfo(pid_t pid)
 	      cpu_time = it->second;
 	  }
 	info->cpu_time = cpu_time;
-	info->start_time = proctime.start_time;
+	/* zhua: get start_time/nice/ppid from procstate */
+	info->start_time = procstate.start_time;
+	info->nice = procstate.nice;
+	/* zhua */
+	info->vmsize	= procstate.vsize;
+	info->memres	= procstate.resident;
+	info->pcpu      = procstate.load;
 
 	get_process_selinux_context (info);
 }
@@ -757,7 +801,7 @@ refresh_list (ProcData *procdata, const 
 	  ++next;
 
 	  if (pids.find(info->pid) == pids.end()) {
-	    procman_debug("ripping %d", info->pid);
+	    //procman_debug("ripping %d", info->pid);
 	    remove_info_from_tree(procdata, model, info, addition);
 	    addition.remove(info);
 	    ProcInfo::all.erase(it);
@@ -785,12 +829,12 @@ refresh_list (ProcData *procdata, const 
 
 
 	while (not addition.empty()) {
-	  procman_debug("looking for %d parents", int(addition.size()));
+	  //procman_debug("looking for %d parents", int(addition.size()));
 	  ProcList::iterator it(addition.begin());
 
 	  while (it != addition.end()) {
-	    procman_debug("looking for %d's parent with ppid %d",
-			  int((*it)->pid), int((*it)->ppid));
+	    //procman_debug("looking for %d's parent with ppid %d",
+			  //int((*it)->pid), int((*it)->ppid));
 
 
 	    // inserts the process in the treeview if :
@@ -880,9 +924,11 @@ proctable_update_list (ProcData * const 
 
 	/* FIXME: total cpu time elapsed should be calculated on an individual basis here
 	** should probably have a total_time_last gint in the ProcInfo structure */
+/* zhua: delete these sentences, we can get cpu% from file directly. 
 	glibtop_get_cpu (&cpu);
 	procdata->cpu_total_time = MAX(cpu.total - procdata->cpu_total_time_last, 1);
 	procdata->cpu_total_time_last = cpu.total;
+*/
 
 	refresh_list (procdata, pid_list, proclist.number);
 
@@ -895,7 +941,7 @@ proctable_update_list (ProcData * const 
 
 
 void
-proctable_update_all (ProcData * const procdata)
+proctable_update_all (ProcData * procdata)
 {
 	char* string;
 
diff -Nrup gnome-system-monitor-2.25.91/src/selection.cpp gnome-system-monitor-2.25.91.mod/src/selection.cpp
--- gnome-system-monitor-2.25.91/src/selection.cpp	2007-06-30 02:28:26.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/selection.cpp	2009-03-04 12:00:41.995124000 +0800
@@ -33,10 +33,10 @@ namespace procman
 	    if (ProcInfo* proc = ProcInfo::find(*it))
 	      {
 		gtk_tree_selection_select_iter(selection, &proc->node);
-		procman_debug("Re-selected process %u", unsigned(*it));
+		//procman_debug("Re-selected process %u", unsigned(*it));
 	      }
-	    else
-		procman_debug("Could not find process %u, cannot re-select it", unsigned(*it));
+	    //else
+		//procman_debug("Could not find process %u, cannot re-select it", unsigned(*it));
 	  }
       }
   }
diff -Nrup gnome-system-monitor-2.25.91/src/smooth_refresh.cpp gnome-system-monitor-2.25.91.mod/src/smooth_refresh.cpp
--- gnome-system-monitor-2.25.91/src/smooth_refresh.cpp	2009-01-19 02:16:39.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/smooth_refresh.cpp	2009-03-04 11:31:10.615230000 +0800
@@ -65,7 +65,7 @@ void SmoothRefresh::load_gconf_value(GCo
   this->active = value ? gconf_value_get_bool(value) : KEY_DEFAULT_VALUE;
 
   if (this->active)
-    procman_debug("smooth_refresh is enabled");
+    //procman_debug("smooth_refresh is enabled");
 
   if (own_value and value)
     gconf_value_free(value);
@@ -159,10 +159,10 @@ SmoothRefresh::get(guint &new_interval)
 
 
   if (changed) {
-    procman_debug("CPU usage is %3u%%, changed refresh_interval to %u (config %u)",
+    /*procman_debug("CPU usage is %3u%%, changed refresh_interval to %u (config %u)",
 		  this->last_pcpu,
 		  this->interval,
-		  config_interval);
+		  config_interval);*/
   }
 
   g_assert(this->interval == new_interval);
diff -Nrup gnome-system-monitor-2.25.91/src/sysinfo.cpp gnome-system-monitor-2.25.91.mod/src/sysinfo.cpp
--- gnome-system-monitor-2.25.91/src/sysinfo.cpp	2009-01-21 05:13:28.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/sysinfo.cpp	2009-03-04 10:18:54.373979000 +0800
@@ -273,7 +273,7 @@ namespace {
       channel->close();
       Glib::spawn_close_pid(pid);
 
-      procman_debug("lsb_release output = '%s'", content.c_str());
+      //procman_debug("lsb_release output = '%s'", content.c_str());
 
       string release, codename;
       std::istringstream input(content);
diff -Nrup gnome-system-monitor-2.25.91/src/util.cpp gnome-system-monitor-2.25.91.mod/src/util.cpp
--- gnome-system-monitor-2.25.91/src/util.cpp	2009-02-17 02:21:44.000000000 +0800
+++ gnome-system-monitor-2.25.91.mod/src/util.cpp	2009-03-04 10:21:38.634398000 +0800
@@ -192,7 +192,7 @@ load_symbols(const char *module, ...)
 	if (!mod)
 		return FALSE;
 
-	procman_debug("Found %s", module);
+	//procman_debug("Found %s", module);
 
 	va_start(args, module);
 
@@ -208,10 +208,10 @@ load_symbols(const char *module, ...)
 		symbol = va_arg(args, void**);
 
 		if (g_module_symbol(mod, name, symbol)) {
-			procman_debug("Loaded %s from %s", name, module);
+			//procman_debug("Loaded %s from %s", name, module);
 		}
 		else {
-			procman_debug("Could not load %s from %s", name, module);
+			//procman_debug("Could not load %s from %s", name, module);
 			found_all = FALSE;
 			break;
 		}
diff -Nrup gnome-system-monitor-2.26.0/src/util.h gnome-system-monitor-2.26.0-new/src/util.h
--- gnome-system-monitor-2.26.0/src/util.h	2009-02-27 21:50:16.000000000 +0000
+++ gnome-system-monitor-2.26.0-new/src/util.h	2009-04-09 13:50:15.164866011 +0100
@@ -46,7 +46,7 @@ procman_debug_real(const char *file, int
 inline string make_string(char *c_str)
 {
 	if (!c_str) {
-		procman_debug("NULL string");
+		//procman_debug("NULL string");
 		return string();
 	}
