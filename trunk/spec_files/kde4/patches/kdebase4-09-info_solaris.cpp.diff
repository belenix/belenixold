--- kdebase-4.2.4/apps/kinfocenter/base/info_solaris.cpp.orig	Wed Jul 29 21:17:05 2009
+++ kdebase-4.2.4/apps/kinfocenter/base/info_solaris.cpp	Wed Jul 29 21:03:59 2009
@@ -7,6 +7,9 @@
 #include "config-infocenter.h"
 
 #include <QTreeWidgetItemIterator>
+#include <QProcess>
+#include <QDebug>
+#include <QRegExp>
 
 #include <stdio.h>
 #include <stdlib.h>
@@ -26,6 +29,9 @@
 #include <libdevinfo.h>
 #endif /* HAVE_LIBDEVINFO_H */
 
+#define MNTTAB "/etc/mnttab"
+#define INTR_PROG "/usr/bin/show_interrupts"
+
 bool GetInfo_CPU(QTreeWidget* tree) {
 
 	kstat_ctl_t *kctl;
@@ -127,8 +133,68 @@
 	return true;
 }
 
-bool GetInfo_IRQ(QTreeWidget*) {
-	return false;
+bool GetInfo_IRQ(QTreeWidget *tree) {
+	int num = 0;
+	/*
+	 *  set up column headers
+	 */
+	QStringList headers;
+	headers << i18n("IRQ") << i18n("Vector") << i18n("IPL") << i18n("Bus") \
+	        << i18n("Trigger") << i18n("Type") << i18n("CPU") << i18n("Share") \
+	        << i18n("APIC/INT#") << i18n("ISR(s)");
+	tree->setHeaderLabels(headers);
+
+	QProcess si;
+	si.start(INTR_PROG);
+
+	if (si.waitForStarted()) {
+		si.waitForFinished();
+		QByteArray sout = si.readAllStandardOutput();
+		QList<QByteArray> lines = sout.split('\n');
+		QRegExp rx(QString("[ ]+"));
+
+		foreach (QByteArray line, lines) {
+			if (num == 0) {
+				num++;
+				continue;
+			}
+			QStringList fields = QString(line).split(rx);
+			int sz = fields.size();
+
+			QStringList lst;
+			if (sz >= 9) {
+				int num;
+
+				num = 10;
+				if (fields.at(3) == "Lvl" || fields.at(3) == "Edg") {
+					lst << fields.at(0) << fields.at(1) << fields.at(2) \
+					    << "-" << fields.at(3) << fields.at(4) \
+					    << fields.at(5) << fields.at(6) << fields.at(7);
+					num = 9;
+				} else {
+					lst << fields.at(0) << fields.at(1) << fields.at(2) \
+					    << fields.at(3) << fields.at(4) << fields.at(5) \
+					    << fields.at(6) << fields.at(7) << fields.at(8);
+				}
+				if (sz > num) {
+					QByteArray ary;
+					for (int i = num-1; i < sz; i++) {
+						ary += fields.at(i).toAscii();
+						ary += " ";
+					}
+					lst << QString(ary);
+				} else if (sz > num-1) {
+					lst << fields.at(num-1);
+				}
+				new QTreeWidgetItem(tree, lst);
+			}
+		}
+	} else {
+		qDebug() << "Failed to run " << INTR_PROG;
+	}
+
+        tree->sortItems(3, Qt::AscendingOrder);
+	return true;
 }
 
 bool GetInfo_DMA(QTreeWidget*) {
@@ -325,13 +391,12 @@
 			result = *it;
 		}
 		if( result == NULL ) {
-			QStringList list;
-			list << token;
-
+			QString txt(token);
 			/*
 			 *  we haven't found the node, create a new one
 			 */
-			result = new QTreeWidgetItem(parent, previous, list);
+			result = new QTreeWidgetItem(parent, previous);
+			result->setText(0, txt);
 		}
 		else {
 			/*
@@ -458,10 +523,10 @@
 	else
 	nodeResult = type;
 
-	QStringList node;
-	node << i18n( "Nodetype:" ) << nodeResult;
+	QStringList qnode;
+	qnode << i18n( "Nodetype:" ) << nodeResult;
 
-	new QTreeWidgetItem(item, node);
+	new QTreeWidgetItem(item, qnode);
 
 	if( (dev = di_minor_devt( minor )) != DDI_DEV_T_NONE ) {
 		majmin.sprintf( "%ld/%ld", major( dev ), minor( dev ));
