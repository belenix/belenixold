--- usr/src/uts/common/io/lofi.c	Fri May  1 12:32:04 2009
+++ usr/src/uts/common/io/lofi.c	Fri May  1 12:32:03 2009
@@ -351,6 +351,7 @@
 {
 	dev_t	newdev;
 	char	namebuf[50];
+	int	i;
 
 	ASSERT(mutex_owned(&lofi_lock));
 
@@ -391,6 +392,20 @@
 		lsp->ls_uncomp_seg_sz = 0;
 	}
 
+	/*
+	 * Free pre-allocated compressed buffers
+	 */
+	if (lsp->ls_comp_bufs != NULL) {
+		for (i = 0; i < lofi_taskq_nthreads; i++) {
+			if (lsp->ls_comp_bufs[i].bufsize > 0)
+				kmem_free(lsp->ls_comp_bufs[i].buf,
+				    lsp->ls_comp_bufs[i].bufsize);
+		}	
+		kmem_free(lsp->ls_comp_bufs, 
+		    sizeof (struct compbuf) * lofi_taskq_nthreads);
+		mutex_destroy(&lsp->ls_comp_bufs_lock);
+	}	
+
 	mutex_destroy(&lsp->ls_vp_lock);
 
 	ddi_soft_state_free(lofi_statep, minor);
@@ -1009,7 +1024,7 @@
 		u_offset_t salign, ealign;
 		u_offset_t sdiff;
 		uint32_t comp_data_sz;
-		uint64_t i;
+		uint64_t i, j;
 
 		/*
 		 * From here on we're dealing primarily with compressed files
@@ -1105,8 +1120,28 @@
 		 * segments and one uncompressed segment since we
 		 * uncompress segments one at a time
 		 */
-		compressed_seg = kmem_alloc(bp->b_bcount, KM_SLEEP);
-		uncompressed_seg = kmem_alloc(lsp->ls_uncomp_seg_sz, KM_SLEEP);
+		mutex_enter(&lsp->ls_comp_bufs_lock);
+		for (i = 0; i < lofi_taskq_nthreads; i++) {
+			if (lsp->ls_comp_bufs[i].inuse == 0) {
+				lsp->ls_comp_bufs[i].inuse = 1;
+				j = i;
+				break;
+			}
+		}
+
+		mutex_exit(&lsp->ls_comp_bufs_lock);
+		ASSERT(j < lofi_taskq_nthreads);
+
+		if (lsp->ls_comp_bufs[j].bufsize < bp->b_bcount) {
+			if (lsp->ls_comp_bufs[j].bufsize > 0)
+				kmem_free(lsp->ls_comp_bufs[j].buf,
+				    lsp->ls_comp_bufs[j].bufsize);
+			lsp->ls_comp_bufs[j].buf = kmem_alloc(bp->b_bcount,
+							KM_SLEEP);
+			lsp->ls_comp_bufs[j].bufsize = bp->b_bcount;
+		}
+		compressed_seg = lsp->ls_comp_bufs[j].buf;
+
 		/*
 		 * Map in the calculated number of blocks
 		 */
@@ -1124,6 +1159,7 @@
 		cmpbuf = compressed_seg + sdiff;
 		for (i = sblkno; i <= eblkno; i++) {
 			ASSERT(i < lsp->ls_comp_index_sz - 1);
+			uchar_t	*useg;
 
 			/*
 			 * The last segment is special in that it is
@@ -1153,9 +1189,15 @@
 			 * at all
 			 */
 			if (*cmpbuf == UNCOMPRESSED) {
-				bcopy((cmpbuf + SEGHDR), uncompressed_seg,
-				    (cmpbytes - SEGHDR));
+				useg = cmpbuf + SEGHDR;
 			} else {
+				if (uncompressed_seg == NULL)
+					uncompressed_seg = 
+					    kmem_alloc(lsp->ls_uncomp_seg_sz,
+					    KM_SLEEP);
+				useg = uncompressed_seg;
+				uncompressed_seg_index = i;
+
 				if (li->l_decompress((cmpbuf + SEGHDR),
 				    (cmpbytes - SEGHDR), uncompressed_seg,
 				    &seglen, li->l_level) != 0) {
@@ -1164,8 +1206,6 @@
 				}
 			}
 
-			uncompressed_seg_index = i;
-
 			/*
 			 * Determine how much uncompressed data we
 			 * have to copy and copy it
@@ -1174,7 +1214,7 @@
 			if (i == eblkno)
 				xfersize -= (lsp->ls_uncomp_seg_sz - eblkoff);
 
-			bcopy((uncompressed_seg + sblkoff), bufaddr, xfersize);
+			bcopy((useg + sblkoff), bufaddr, xfersize);
 
 			cmpbuf += cmpbytes;
 			bufaddr += xfersize;
@@ -1186,7 +1226,13 @@
 		}
 
 		/*
-		 * Add the data for the last decopressed segment to
+		 * Skip to done if there is no uncompressed data to cache
+		 */ 
+		if (uncompressed_seg == NULL)
+			goto done;
+
+		/*
+		 * Add the data for the last decompressed segment to
 		 * the cache.
 		 *
 		 * In case the uncompressed segment data was added to (and
@@ -1201,8 +1247,11 @@
 		mutex_exit(&lsp->ls_comp_cache_lock);
 
 done:
-		if (compressed_seg != NULL)
-			kmem_free(compressed_seg, comp_data_sz);
+		if (compressed_seg != NULL) {
+			mutex_enter(&lsp->ls_comp_bufs_lock);
+			lsp->ls_comp_bufs[j].inuse = 0;
+			mutex_exit(&lsp->ls_comp_bufs_lock);
+		}	
 		if (uncompressed_seg != NULL)
 			kmem_free(uncompressed_seg, lsp->ls_uncomp_seg_sz);
 	} /* end of handling compressed files */
@@ -1710,6 +1759,13 @@
 		    BE_64(lsp->ls_comp_seg_index[i]);
 	}
 
+	/*
+	 * Finally setup per-thread pre-allocated buffers 
+	 */
+	lsp->ls_comp_bufs = kmem_zalloc(lofi_taskq_nthreads *
+	    sizeof (struct compbuf), KM_SLEEP);
+	mutex_init(&lsp->ls_comp_bufs_lock, NULL, MUTEX_DRIVER, NULL);
+
 	return (error);
 }
 
@@ -1994,6 +2050,7 @@
 		goto propout;
 
 	/* initialize these variables for all lofi files */
+	lsp->ls_comp_bufs = NULL;
 	lsp->ls_uncomp_seg_sz = 0;
 	lsp->ls_vp_comp_size = lsp->ls_vp_size;
 	lsp->ls_comp_algorithm[0] = '\0';
--- usr/src/uts/common/sys/lofi.h	Fri May  1 12:32:05 2009
+++ usr/src/uts/common/sys/lofi.h	Fri May  1 12:32:05 2009
@@ -190,6 +190,15 @@
 	((vtype == VREG) || (vtype == VBLK) || (vtype == VCHR))
 
 /*
+ * Pre-allocated memory buffers for the purpose of compression
+ */
+struct compbuf {
+	void		*buf;
+	uint32_t	bufsize;
+	int		inuse;
+};
+
+/*
  * Need exactly 6 bytes to identify encrypted lofi image
  */
 extern const char lofi_crypto_magic[6];
@@ -244,6 +253,10 @@
 	uint32_t	ls_comp_index_data_sz;
 	u_offset_t	ls_vp_comp_size; /* actual compressed file size */
 
+	/* pre-allocated list of buffers for compressed segment data */
+	kmutex_t	ls_comp_bufs_lock;
+	struct compbuf	*ls_comp_bufs;
+
 	/* lock and anchor for compressed segment caching */
 	kmutex_t	ls_comp_cache_lock;	/* protects ls_comp_cache */
 	list_t		ls_comp_cache;		/* cached decompressed segs */
