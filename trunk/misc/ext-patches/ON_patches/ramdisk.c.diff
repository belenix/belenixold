--- usr/src/uts/common/io/ramdisk.c.orig	Sat Jul 26 08:25:51 2008
+++ usr/src/uts/common/io/ramdisk.c	Thu Jan  8 22:21:51 2009
@@ -84,6 +84,8 @@
 #include <sys/sunddi.h>
 #include <sys/ramdisk.h>
 #include <vm/seg_kmem.h>
+#include <sys/zmod.h>
+#include <sys/byteorder.h>
 
 /*
  * An opaque handle where information about our set of ramdisk devices lives.
@@ -116,6 +118,9 @@
 
 static uint_t	rd_maxphys = RD_DEFAULT_MAXPHYS;
 
+static void rd_rw(rd_devstate_t *rsp, struct buf *bp, offset_t offset, size_t nbytes);
+static int rd_init_compressed(rd_devstate_t *rsp, int isboot);
+
 /*
  * Is the driver busy, i.e. are there any pseudo ramdisk devices in existence?
  */
@@ -574,6 +579,7 @@
 	dev_info_t	*dip = rsp->rd_dip;
 	char		namebuf[RD_NAME_LEN + 5];
 	dev_t		fulldev;
+	int		i;
 
 	if (rsp->rd_window_obp == 0 && rsp->rd_window_virt != NULL) {
 		if (rsp->rd_window_base != RD_WINDOW_NOT_MAPPED) {
@@ -583,6 +589,15 @@
 	}
 	mutex_destroy(&rsp->rd_device_lock);
 
+	if (rsp->rs_uncomp_seg_sz != 0) {
+		kmem_free(rsp->rs_comp_index_data, rsp->rs_comp_index_data_sz);
+		for (i = 0; i < rsp->rs_comp_index_sz; i++)
+			if (rsp->rs_uncomp_seg_index[i] != NULL)
+				kmem_free(rsp->rs_uncomp_seg_index[i], rsp->rs_uncomp_seg_sz);
+		kmem_free(rsp->rs_uncomp_seg_index, rsp->rs_uncomp_index_sz);
+		mutex_destroy(&rsp->rd_cow_lock);
+	}
+
 	if (rsp->rd_existing) {
 		ddi_prop_free(rsp->rd_existing);
 	}
@@ -644,6 +659,8 @@
 	rsp->rd_dip = dip;
 	rsp->rd_minor = minor;
 	rsp->rd_size = size;
+	rsp->rs_uncomp_seg_sz = 0;
+	rsp->do_comp_check = 0;
 
 	/*
 	 * Allocate virtual window onto ramdisk.
@@ -751,6 +768,159 @@
 	return (NULL);
 }
 
+static int
+rd_init_compressed(rd_devstate_t *rsp, int isboot)
+{
+	char		iodata[DEV_BSIZE], *iobuf;
+	struct buf*	rbuf;
+	int		compress_index, error;
+	uint32_t	index_sz, header_len, i;;
+	dev_info_t      *dip = rsp->rd_dip;
+	dev_t		fulldev;
+	int64_t		Nblocks_prop_val;
+	int64_t		Size_prop_val;
+
+	/*
+	 * First check for compression signature.
+	 */
+	rbuf = getrbuf(KM_SLEEP);
+	rbuf->b_iodone = NULL;
+	rbuf->b_flags = B_NOCACHE|B_BUSY|B_READ;
+	rbuf->b_un.b_addr = iodata;
+	rd_rw(rsp, rbuf, 0, DEV_BSIZE);
+
+	rsp->rs_uncomp_seg_index = NULL;
+	rsp->rs_comp_seg_index = NULL;
+	rsp->rs_uncomp_seg_sz = 0;
+	rsp->rs_comp_size = rsp->rd_size;
+	rsp->rs_actual_size = rsp->rd_size;
+	if (strncmp(iodata, "gzip", 4) != 0) {
+		if (isboot) {
+			freerbuf(rbuf);
+			cmn_err(CE_WARN, "Algo: %s", iodata);
+			return (0);
+		}
+
+		cmn_err(CE_WARN, "Ramdisk is not compressed or has an "
+		    "unsupported compression algorithm.");
+		freerbuf(rbuf);
+		return (EINVAL);
+	}
+
+	iobuf = &iodata[0];
+	iobuf += MAXALGLEN;
+	bcopy(iobuf, &(rsp->rs_uncomp_seg_sz), sizeof (rsp->rs_uncomp_seg_sz));
+	rsp->rs_uncomp_seg_sz = ntohl(rsp->rs_uncomp_seg_sz);
+
+	/*
+	 * The compressed segment size must be a power of 2
+	 */
+	if (rsp->rs_uncomp_seg_sz % 2) {
+		freerbuf(rbuf);
+		cmn_err(CE_WARN, "Segment size: %u not a power of 2",
+		    rsp->rs_uncomp_seg_sz);
+		return (EINVAL);
+	}
+
+	for (i = 0; !((rsp->rs_uncomp_seg_sz >> i) & 1); i++)
+		;
+
+	rsp->rs_comp_seg_shift = i;
+	iobuf += sizeof (rsp->rs_uncomp_seg_sz);
+	bcopy(iobuf, &(rsp->rs_comp_index_sz), sizeof (rsp->rs_comp_index_sz));
+	rsp->rs_comp_index_sz = ntohl(rsp->rs_comp_index_sz);
+
+	iobuf += sizeof (rsp->rs_comp_index_sz);
+	bcopy(iobuf, &(rsp->rs_uncomp_last_seg_sz),
+	    sizeof (rsp->rs_uncomp_last_seg_sz));
+	rsp->rs_uncomp_last_seg_sz = ntohl(rsp->rs_uncomp_last_seg_sz);
+
+	/*
+	 * Compute the total size of the uncompressed data
+	 * for use in fake_disk_geometry and other calculations.
+	 * Disk geometry has to be faked with respect to the
+	 * actual uncompressed data size rather than the
+	 * compressed file size.
+	 */
+	rsp->rd_size = (rsp->rs_comp_index_sz - 2) * rsp->rs_uncomp_seg_sz
+	    + rsp->rs_uncomp_last_seg_sz;
+
+	/*
+	 * Index size is rounded up to a 512 byte boundary for ease
+	 * of segmapping
+	 */
+	index_sz = sizeof (uint64_t) * rsp->rs_comp_index_sz;
+	header_len = MAXALGLEN + sizeof (rsp->rs_uncomp_seg_sz) +
+	    sizeof (rsp->rs_comp_index_sz) +
+	    sizeof (rsp->rs_uncomp_last_seg_sz);
+	rsp->rs_comp_offbase = header_len + index_sz;
+
+	index_sz += header_len;
+	index_sz = roundup(index_sz, DEV_BSIZE);
+
+	rsp->rs_comp_index_data = kmem_alloc(index_sz, KM_SLEEP);
+	rsp->rs_comp_index_data_sz = index_sz;
+	rsp->rs_uncomp_index_sz = rsp->rs_comp_index_sz * sizeof (unsigned char *);
+	rsp->rs_uncomp_seg_index = (unsigned char **)
+	    kmem_alloc(rsp->rs_uncomp_index_sz, KM_SLEEP);
+	for (i = 0; i < rsp->rs_comp_index_sz; i++) {
+		rsp->rs_uncomp_seg_index[i] = NULL;
+	}
+
+	/*
+	 * Read in the index -- this has a side-effect
+	 * of reading in the header as well
+	 */
+	bioinit(rbuf);
+	rbuf->b_iodone = NULL;
+	rbuf->b_flags = B_NOCACHE|B_BUSY|B_READ;
+	rbuf->b_un.b_addr = rsp->rs_comp_index_data;
+	rd_rw(rsp, rbuf, 0, index_sz);
+
+	freerbuf(rbuf);
+	/* Skip the header, this is where the index really begins */
+	rsp->rs_comp_seg_index =
+	    /*LINTED*/
+	    (uint64_t *)(rsp->rs_comp_index_data + header_len);
+
+	/*
+	 * Now recompute offsets in the index to account for
+	 * the header length. Do not do this for boot ramdisks since
+	 * the index entries will already have been modified during
+	 * boot.
+	 */
+	if (!isboot) {
+		for (i = 0; i < rsp->rs_comp_index_sz; i++) {
+			rsp->rs_comp_seg_index[i] = rsp->rs_comp_offbase +
+			    BE_64(rsp->rs_comp_seg_index[i]);
+        	}
+	}
+
+	/* update DDI properties */
+	fulldev = makedevice(ddi_driver_major(dip), rsp->rd_minor);
+	Size_prop_val = rsp->rd_size;
+	if ((error = ddi_prop_update_int64(fulldev, dip,
+	    SIZE_PROP_NAME, Size_prop_val)) != DDI_PROP_SUCCESS) {
+		goto prop_failed;
+	}
+	Nblocks_prop_val = rsp->rd_size / DEV_BSIZE;
+	if ((error = ddi_prop_update_int64(fulldev, dip,
+	    NBLOCKS_PROP_NAME, Nblocks_prop_val)) != DDI_PROP_SUCCESS) {
+		goto prop_failed;
+	}
+
+	mutex_init(&rsp->rd_cow_lock, NULL, MUTEX_DRIVER, NULL);
+	return (0);
+
+prop_failed:
+	kmem_free(rsp->rs_comp_index_data, index_sz);
+	kmem_free(rsp->rs_uncomp_seg_index, rsp->rs_uncomp_index_sz);
+	rsp->rs_uncomp_seg_sz = 0;
+	cmn_err(CE_WARN, "Compressed ramdisk prop update failed: %d", error);
+
+	return (error);
+}
+
 /*
  * Undo what we did in rd_attach, freeing resources and removing things which
  * we installed.  The system framework guarantees we are not active with this
@@ -871,6 +1041,12 @@
 				goto attach_failed;
 			}
 
+			/*
+			 * For boot time ramdisks enable delayed check for compression
+			 * support after attach reports success.
+			 */
+			rsp->do_comp_check = 1;
+
 			rsp->rd_existing = ep;
 			rsp->rd_nexisting = nep;
 		}
@@ -1044,7 +1220,6 @@
 	int	reading = bp->b_flags & B_READ;
 	caddr_t	buf_addr;
 
-	bp_mapin(bp);
 	buf_addr = bp->b_un.b_addr;
 
 	while (nbytes > 0) {
@@ -1074,14 +1249,49 @@
 	}
 }
 
+static int gzip_decompress(void *src, size_t srclen, void *dst,
+    size_t *dstlen)
+{
+	ASSERT(*dstlen >= srclen);
+
+	if (z_uncompress(dst, dstlen, src, srclen) != Z_OK)
+		return (-1);
+	return (0);
+}
+
 static int
 rd_strategy(struct buf *bp)
 {
 	rd_devstate_t	*rsp;
 	offset_t	offset;
+	uint64_t sblkno, eblkno, cmpbytes;
+ 	offset_t sblkoff, eblkoff;
+ 	u_offset_t salign, ealign;
+ 	u_offset_t sdiff;
+ 	uint32_t comp_data_sz;
+ 	caddr_t bufaddr;
+ 	unsigned char *compressed_seg = NULL, *cmpbuf;
+ 	unsigned char *uncompressed_seg = NULL, *useg;
+	unsigned long seglen;
+	int	error, i, b_flags;
+	size_t oblkcount, xfersize;
+	int     reading = bp->b_flags & B_READ;
 
 	rsp = ddi_get_soft_state(rd_statep, getminor(bp->b_edev));
+
+	/*
+	 * For boot time ramdisks a delayed check for compression status may
+	 * have been enabled. Do a one-time check here.
+	 */
+	if (rsp->do_comp_check) {
+		(void)rd_init_compressed(rsp, 1);
+		rsp->do_comp_check = 0;
+	}
+
+	bp_mapin(bp);
 	offset = bp->b_blkno * DEV_BSIZE;
+	bufaddr = bp->b_un.b_addr;
+	error = 0;
 
 	if (rsp == NULL) {
 		bp->b_error = ENXIO;
@@ -1100,10 +1310,203 @@
 
 		nbytes = min(bp->b_bcount, rsp->rd_size - offset);
 
-		rd_rw(rsp, bp, offset, nbytes);
+		if (rsp->rs_uncomp_seg_sz == 0) {
+			rd_rw(rsp, bp, offset, nbytes);
+		} else {
+			/*
+	 		 * Compute starting and ending compressed segment numbers
+			 * We use only bitwise operations avoiding division and
+			 * modulus because we enforce the compression segment size
+			 * to a power of 2
+			 */
+			sblkno = offset >> rsp->rs_comp_seg_shift;
+			sblkoff = offset & (rsp->rs_uncomp_seg_sz - 1);
+			eblkno = (offset + bp->b_bcount) >> rsp->rs_comp_seg_shift;
+			eblkoff = (offset + bp->b_bcount) & (rsp->rs_uncomp_seg_sz - 1);
 
+			/*
+	 		 * Align start offset to block boundary for segmap
+			 */
+			salign = rsp->rs_comp_seg_index[sblkno];
+			sdiff = salign & (DEV_BSIZE - 1);
+			salign -= sdiff;
+			if (eblkno >= (rsp->rs_comp_index_sz - 1)) {
+				/*
+				 * We're dealing with the last segment of
+				 * the compressed file -- the size of this
+				 * segment *may not* be the same as the
+				 * segment size for the file
+				 */
+				eblkoff = (offset + bp->b_bcount) &
+				    (rsp->rs_uncomp_last_seg_sz - 1);
+				ealign = rsp->rs_comp_size;
+			} else {
+				ealign = rsp->rs_comp_seg_index[eblkno + 1];
+			}
+ 
+	 		/*
+			 * Preserve original request paramaters
+			 */
+			oblkcount = bp->b_bcount;
+			b_flags = bp->b_flags;
+			bp->b_flags = B_NOCACHE|B_BUSY|B_READ;
+ 
+	 		/*
+			 * Assign the calculated parameters
+			 */
+			comp_data_sz = ealign - salign;
+			bp->b_bcount = comp_data_sz;
+ 
+			/*
+			 * Allocate fixed size memory blocks to hold compressed
+			 * segments and one uncompressed segment since we
+			 * uncompress segments one at a time
+			 */
+			compressed_seg = kmem_alloc(bp->b_bcount, KM_SLEEP);
+			uncompressed_seg = NULL;
+			bp->b_un.b_addr = (caddr_t)compressed_seg;
+
+			/*
+			 * Map in the calculated number of blocks
+			 */
+			rd_rw(rsp, bp, salign, comp_data_sz);
+			bp->b_bcount = oblkcount;
+			bp->b_resid = oblkcount;
+			bp->b_flags = b_flags;
+			bp->b_un.b_addr = bufaddr;
+
+			/*
+	 		 * We have the compressed blocks, now process them
+			 */
+			cmpbuf = compressed_seg + sdiff;
+			for (i = sblkno; i < (eblkno + 1) && i < rsp->rs_comp_index_sz;
+			    i++) {
+				/*
+	 			 * Each of the segment index entries contains
+				 * the starting block number for that segment.
+				 * The number of compressed bytes in a segment
+				 * is thus the difference between the starting
+				 * block number of this segment and the starting
+				 * block number of the next segment.
+				 */
+				if ((i == eblkno) &&
+	 			    (i == rsp->rs_comp_index_sz - 1)) {
+					cmpbytes = rsp->rs_comp_size -
+					    rsp->rs_comp_seg_index[i];
+				} else {
+					cmpbytes = rsp->rs_comp_seg_index[i + 1] -
+					    rsp->rs_comp_seg_index[i];
+ 				}
+
+				/*
+	 			 * The first byte in a compressed segment is a flag
+				 * that indicates whether this segment is compressed
+				 * at all
+				 */
+				if (*cmpbuf == UNCOMPRESSED ||
+				    rsp->rs_uncomp_seg_index[i] != NULL) {
+					if (rsp->rs_uncomp_seg_index[i] == NULL) {
+						/*bcopy((cmpbuf + SEGHDR), uncompressed_seg,
+						    (cmpbytes - SEGHDR));*/
+						/*
+						 * The ramdisk segment is uncompressed
+						 * so we point directly to that and avoid
+						 * a bcopy.
+						 */
+						useg = cmpbuf + SEGHDR;
+					} else {
+						/*
+						 * We have a COW-ed segment.
+						 */
+						useg = rsp->rs_uncomp_seg_index[i];
+					}
+				} else {
+					seglen = rsp->rs_uncomp_seg_sz;
+					uncompressed_seg = kmem_alloc(rsp->rs_uncomp_seg_sz,
+					    KM_SLEEP);
+					useg = uncompressed_seg;
+	
+					if (gzip_decompress((cmpbuf + SEGHDR),
+					    (cmpbytes - SEGHDR), uncompressed_seg,
+					    &seglen) != 0) {
+						error = EIO;
+						goto done;
+					}
+				}
+
+				/*
+				 * COW the segment if we are writing and it is not
+				 * cow-ed already. The copy array entry is checked twice
+				 * to restrict mutex entry only for COW operations.
+				 */
+				if (!reading && rsp->rs_uncomp_seg_index[i] == NULL) {
+					/*
+					 * Acquire lock and check once again if some
+					 * other write has already COW-ed this segment.
+					 */
+					mutex_enter(&rsp->rd_cow_lock);
+					if (rsp->rs_uncomp_seg_index[i] == NULL) {
+						/*
+						 * If we actually decompressed this
+						 * segment we retain the decompressed
+						 * segment. Otherwise we just plonk a
+						 * pointer into the uncompressed
+						 * segment in the ramdisk. Reduces
+						 * memory overhead and unnecessary
+						 * bcopy.
+						 */
+						if (uncompressed_seg != NULL) {
+							rsp->rs_uncomp_seg_index[i] =
+							    uncompressed_seg;
+							uncompressed_seg = NULL;
+						} else {
+							rsp->rs_uncomp_seg_index[i] = useg;
+						}
+					} else {
+						useg = rsp->rs_uncomp_seg_index[i];
+					}
+					rsp->rs_actual_size += rsp->rs_uncomp_seg_sz;
+					mutex_exit(&rsp->rd_cow_lock);
+				}
+
+				/*
+				 * Determine how much uncompressed data we
+				 * have to copy and copy it
+				 */
+				xfersize = rsp->rs_uncomp_seg_sz - sblkoff;
+				if (i == eblkno) {
+					if (i == (rsp->rs_comp_index_sz - 1))
+						xfersize -= (rsp->rs_uncomp_last_seg_sz
+						    - eblkoff);
+					else
+						xfersize -=
+						    (rsp->rs_uncomp_seg_sz - eblkoff);
+				}
+
+				if (reading) {
+					bcopy((useg + sblkoff), bufaddr, xfersize);
+				} else {
+					bcopy(bufaddr, (useg + sblkoff), xfersize);
+				}
+
+				cmpbuf += cmpbytes;
+				bufaddr += xfersize;
+				bp->b_resid -= xfersize;
+				sblkoff = 0;
+
+				if (bp->b_resid == 0)
+					break;
+			}
+		}
+
 		bp->b_resid = bp->b_bcount - nbytes;
 
+done:
+		if (compressed_seg != NULL)
+			kmem_free(compressed_seg, comp_data_sz);
+		if (uncompressed_seg != NULL)
+			kmem_free(uncompressed_seg, rsp->rs_uncomp_seg_sz);
+
 		if (rsp->rd_kstat) {
 			kstat_io_t *kioptr;
 
@@ -1122,7 +1525,7 @@
 	}
 
 	biodone(bp);
-	return (0);
+	return (error);
 }
 
 /*ARGSUSED*/
@@ -1311,6 +1714,12 @@
 		if (error)
 			return (EFAULT);
 		return (0);
+	case RD_RESCAN:
+		/*
+		 * Private ioctl to rescan the ramdisk to check for
+		 * compression header.
+		 */
+		return (rd_init_compressed(rsp, 0));
 	default:
 		return (ENOTTY);
 	}
